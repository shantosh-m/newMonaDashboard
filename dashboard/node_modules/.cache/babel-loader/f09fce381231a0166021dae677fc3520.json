{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  // const { machineData } = useMachineContext();\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  const Protector = [\"Protector1\", \"Protector2\", \"Protector3\", \"Protector4\", \"Protector5\", \"Protector6\", \"Protector7\", \"Protector8\", \"Protector9\", \"Protector10\", \"Protector11\", \"Protector12\", \"Protector13\", \"Protector14\", \"Protector15\", \"Protector16\", \"Protector17\", \"Protector18\", \"Protector19\", \"Protector20\", \"Protector21\", \"Protector22\", \"Protector23\"];\n  const Maker = [\"Maker1\", \"Maker2\", \"Maker3\", \"Maker4\", \"Maker5\", \"Maker6\", \"Maker7\", \"Maker8\", \"Maker9\", \"Maker10\", \"Maker11\", \"Maker12\", \"Maker13\", \"Maker14\", \"Maker15\", \"Maker16\", \"Maker17\", \"Maker18\", \"Maker19\", \"Maker20\", \"Maker21\", \"Maker22\", \"Maker23\"];\n  const mNumber = [\"M#123\", \"M#124\", \"M#125\", \"M#126\", \"M#127\", \"M#128_1\", \"M#129\", \"M#130\", \"M#131_1\", \"M#132\", \"M#133_2\", \"M#134\", \"M#135\", \"M#133_3\", \"M#137\", \"M#138\", \"M#128_2\", \"M#140\", \"M#141\", \"M#142\", \"M#143\", \"M#144\", \"M#145\"];\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  const [machines, setMachines] = useState([]);\n  useEffect(() => {\n    const generateRandomValue = () => Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n\n    const generatedMachines = [];\n    let stuckCount = 0;\n    let notWorkingCount = 0;\n\n    for (let i = 0; i < 24; i++) {\n      const mold_shots = generateRandomValue();\n      const failed_shots = generateRandomValue(); // Choose a random status from the sta array\n\n      let status = sta[Math.floor(Math.random() * sta.length)]; // Ensure that \"stuck\" is selected fewer than two times\n\n      if (status === \"stuck\" && stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        stuckCount++;\n      }\n\n      if (status === \"notWorking\" && notWorkingCount >= 2) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        notWorkingCount++;\n      }\n\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i]],\n        moldProtector: Protector[i],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i],\n        moldShots: mold_shots,\n        failedShots: failed_shots\n      };\n      generatedMachines.push(machine);\n    }\n\n    setMachines(generatedMachines);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setMachines(prevMachines => {\n        const updatedMachines = prevMachines.map(machine => {\n          // Check if the machine is not \"stuck\" or \"notWorking\" before updating\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            machine.moldShots += 1;\n\n            if (machine.moldShots % 50 === 0) {\n              machine.failedShots += 1;\n            }\n          }\n\n          return machine;\n        });\n        return updatedMachines;\n      });\n    }, 10000); // Update every second (1000 milliseconds)\n\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: \"Molding Section Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 11,\n        sm: 4,\n        md: 2,\n        lg: 2,\n        m: {\n          sm: 2,\n          md: 4,\n          lg: 0\n        },\n        sx: {\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: index === 0 ? /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `machines/:${machine.machineID}`\n          },\n          state: { ...machine\n          },\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n            ID: machine.machineID,\n            monaNumber: machine.monaNumber,\n            moldProtector: machine.moldProtector,\n            status: machine.status,\n            moldMaker: machine.moldMaker,\n            moldMaterial: machine.moldMaterial,\n            moldShots: machine.moldShots,\n            failedShots: machine.failedShots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MachineList, \"xf/ld9baHigQEZsNJiqNOP72r5U=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useState","useEffect","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","Material","Protector","Maker","mNumber","sta","machines","setMachines","generateRandomValue","Math","floor","random","generatedMachines","stuckCount","notWorkingCount","i","mold_shots","failed_shots","status","length","machine","machineID","monaNumber","moldProtector","moldMaterial","moldMaker","moldShots","failedShots","push","intervalId","setInterval","prevMachines","updatedMachines","map","clearInterval","display","alignItems","justifyContent","index","sm","md","lg","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Link from \"@mui/material/Link\";\n\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n  const Protector = [\n    \"Protector1\",\n    \"Protector2\",\n    \"Protector3\",\n    \"Protector4\",\n    \"Protector5\",\n    \"Protector6\",\n    \"Protector7\",\n    \"Protector8\",\n    \"Protector9\",\n    \"Protector10\",\n    \"Protector11\",\n    \"Protector12\",\n    \"Protector13\",\n    \"Protector14\",\n    \"Protector15\",\n    \"Protector16\",\n    \"Protector17\",\n    \"Protector18\",\n    \"Protector19\",\n    \"Protector20\",\n    \"Protector21\",\n    \"Protector22\",\n    \"Protector23\",\n  ];\n\n  const Maker = [\n    \"Maker1\",\n    \"Maker2\",\n    \"Maker3\",\n    \"Maker4\",\n    \"Maker5\",\n    \"Maker6\",\n    \"Maker7\",\n    \"Maker8\",\n    \"Maker9\",\n    \"Maker10\",\n    \"Maker11\",\n    \"Maker12\",\n    \"Maker13\",\n    \"Maker14\",\n    \"Maker15\",\n    \"Maker16\",\n    \"Maker17\",\n    \"Maker18\",\n    \"Maker19\",\n    \"Maker20\",\n    \"Maker21\",\n    \"Maker22\",\n    \"Maker23\",\n  ];\n\n  const mNumber = [\n    \"M#123\",\n    \"M#124\",\n    \"M#125\",\n    \"M#126\",\n    \"M#127\",\n    \"M#128_1\",\n    \"M#129\",\n    \"M#130\",\n    \"M#131_1\",\n    \"M#132\",\n    \"M#133_2\",\n    \"M#134\",\n    \"M#135\",\n    \"M#133_3\",\n    \"M#137\",\n    \"M#138\",\n    \"M#128_2\",\n    \"M#140\",\n    \"M#141\",\n    \"M#142\",\n    \"M#143\",\n    \"M#144\",\n    \"M#145\",\n  ];\n\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  const [machines, setMachines] = useState([]);\n\n  useEffect(() => {\n    const generateRandomValue = () =>\n      Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n\n    const generatedMachines = [];\n    let stuckCount = 0;\n    let notWorkingCount = 0;\n\n    for (let i = 0; i < 24; i++) {\n      const mold_shots = generateRandomValue();\n      const failed_shots = generateRandomValue();\n\n      // Choose a random status from the sta array\n      let status = sta[Math.floor(Math.random() * sta.length)];\n\n      // Ensure that \"stuck\" is selected fewer than two times\n      if (status === \"stuck\" && stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        stuckCount++;\n      }\n\n      if (status === \"notWorking\" && notWorkingCount >= 2) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        notWorkingCount++;\n      }\n\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i]],\n        moldProtector: Protector[i],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i],\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n      };\n\n      generatedMachines.push(machine);\n    }\n\n    setMachines(generatedMachines);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setMachines((prevMachines) => {\n        const updatedMachines = prevMachines.map((machine) => {\n          // Check if the machine is not \"stuck\" or \"notWorking\" before updating\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            machine.moldShots += 1;\n\n            if (machine.moldShots % 50 === 0) {\n              machine.failedShots += 1;\n            }\n          }\n\n          return machine;\n        });\n\n        return updatedMachines;\n      });\n    }, 10000); // Update every second (1000 milliseconds)\n\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  return (\n    <Container maxWidth={false}>\n      <Title title=\"Molding Section Statistics\" />\n\n      <Grid\n        container\n        spacing={4}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {machines.map((machine, index) => (\n          <Grid\n            item\n            xs={11}\n            sm={4}\n            md={2}\n            lg={2}\n            m={{ sm: 2, md: 4, lg: 0 }}\n            key={index}\n            sx={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {index === 0 ? (\n              <TimeGrid />\n            ) : (\n              <Link\n                to={{ pathname: `machines/:${machine.machineID}` }}\n                state={{ ...machine }}\n                style={{ textDecoration: \"none\" }}\n              >\n                <MachineGrid\n                  ID={machine.machineID}\n                  monaNumber={machine.monaNumber}\n                  moldProtector={machine.moldProtector}\n                  status={machine.status}\n                  moldMaker={machine.moldMaker}\n                  moldMaterial={machine.moldMaterial}\n                  moldShots={machine.moldShots}\n                  failedShots={machine.failedShots}\n                />\n              </Link>\n            )}\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}