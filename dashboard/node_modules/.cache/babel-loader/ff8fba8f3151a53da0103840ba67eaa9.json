{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// MachineContext.js\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nconst MachineContext = /*#__PURE__*/createContext();\n\nconst {\n  io\n} = require(\"socket.io-client\");\n\nexport const MachineProvider = () => {\n  _s();\n\n  const [machineData, setMachineData] = useState();\n\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3002/gettingMachineInfo\");\n      setMachineData(response.data);\n      console.log(\"Backend API Response:\", response.data);\n      console.log(\"Backend API Response:\", machineData);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  };\n\n  const setupSocketListener = () => {\n    const socket = io(process.env.REACT_APP_SERVER_BASE_URL, {\n      transports: [\"websocket\"]\n    });\n    socket.on(\"machineDataUpdate\", data => {\n      // Update the machineData state with real-time data from the socket\n      setMachineData(data);\n      console.log(\"Socket update:\", data);\n    });\n    socket.on(\"machines\", data => {\n      console.log(\"Connected to socket\");\n      console.log(\"socket data \", data);\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from socket\");\n    });\n  };\n\n  useEffect(() => {\n    fetchDataFromBackend();\n    setupSocketListener(); // Cleanup function for socket connection when the component unmounts\n  }, []);\n};\n\n_s(MachineProvider, \"9ukQ3/1AJ2Gl+iZphDP9yxtVErA=\");\n\n_c = MachineProvider;\nexport const useMachineContext = () => {\n  _s2();\n\n  return useContext(MachineContext);\n};\n\n_s2(useMachineContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","MachineContext","io","require","MachineProvider","machineData","setMachineData","fetchDataFromBackend","response","get","data","console","log","error","setupSocketListener","socket","process","env","REACT_APP_SERVER_BASE_URL","transports","on","useMachineContext"],"sources":["E:/new Dashboard/dashboard/src/contexts/machinecontext.js"],"sourcesContent":["// MachineContext.js\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst MachineContext = createContext();\n\nconst { io } = require(\"socket.io-client\");\n\nexport const MachineProvider = () => {\n  const [machineData, setMachineData] = useState();\n\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\n        \"http://localhost:3002/gettingMachineInfo\"\n      );\n      setMachineData(response.data);\n      console.log(\"Backend API Response:\", response.data);\n      console.log(\"Backend API Response:\", machineData);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  };\n\n  const setupSocketListener = () => {\n    const socket = io(process.env.REACT_APP_SERVER_BASE_URL, {\n      transports: [\"websocket\"],\n    });\n    socket.on(\"machineDataUpdate\", (data) => {\n      // Update the machineData state with real-time data from the socket\n      setMachineData(data);\n      console.log(\"Socket update:\", data);\n    });\n\n    socket.on(\"machines\", (data) => {\n      console.log(\"Connected to socket\");\n      console.log(\"socket data \", data);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from socket\");\n    });\n  };\n\n  useEffect(() => {\n    fetchDataFromBackend();\n    setupSocketListener();\n\n    // Cleanup function for socket connection when the component unmounts\n  }, []);\n};\n\nexport const useMachineContext = () => {\n  return useContext(MachineContext);\n};\n"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,gBAAGL,aAAa,EAApC;;AAEA,MAAM;EAAEM;AAAF,IAASC,OAAO,CAAC,kBAAD,CAAtB;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;;EACnC,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,EAA9C;;EAEA,MAAMS,oBAAoB,GAAG,YAAY;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CACrB,0CADqB,CAAvB;MAGAH,cAAc,CAACE,QAAQ,CAACE,IAAV,CAAd;MACAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCJ,QAAQ,CAACE,IAA9C;MACAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCP,WAArC;IACD,CAPD,CAOE,OAAOQ,KAAP,EAAc;MACdF,OAAO,CAACE,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;IACD;EACF,CAXD;;EAaA,MAAMC,mBAAmB,GAAG,MAAM;IAChC,MAAMC,MAAM,GAAGb,EAAE,CAACc,OAAO,CAACC,GAAR,CAAYC,yBAAb,EAAwC;MACvDC,UAAU,EAAE,CAAC,WAAD;IAD2C,CAAxC,CAAjB;IAGAJ,MAAM,CAACK,EAAP,CAAU,mBAAV,EAAgCV,IAAD,IAAU;MACvC;MACAJ,cAAc,CAACI,IAAD,CAAd;MACAC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,IAA9B;IACD,CAJD;IAMAK,MAAM,CAACK,EAAP,CAAU,UAAV,EAAuBV,IAAD,IAAU;MAC9BC,OAAO,CAACC,GAAR,CAAY,qBAAZ;MACAD,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAA5B;IACD,CAHD;IAKAK,MAAM,CAACK,EAAP,CAAU,YAAV,EAAwB,MAAM;MAC5BT,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACD,CAFD;EAGD,CAlBD;;EAoBAb,SAAS,CAAC,MAAM;IACdQ,oBAAoB;IACpBO,mBAAmB,GAFL,CAId;EACD,CALQ,EAKN,EALM,CAAT;AAMD,CA1CM;;GAAMV,e;;KAAAA,e;AA4Cb,OAAO,MAAMiB,iBAAiB,GAAG,MAAM;EAAA;;EACrC,OAAOxB,UAAU,CAACI,cAAD,CAAjB;AACD,CAFM;;IAAMoB,iB"},"metadata":{},"sourceType":"module"}