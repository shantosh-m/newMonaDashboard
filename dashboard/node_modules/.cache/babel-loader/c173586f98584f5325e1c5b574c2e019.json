{"ast":null,"code":"var _jsxFileName = \"/home_2/university/mona/e17-co328-Analysis-Tool-for-Industrial-Images/web-app/src/components/pages/MachinePage.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\nimport { Box, Container, Grid } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"../machinegrid\";\nimport moment from \"moment\";\nimport { Title } from \"../title.js\";\nimport { useMachineContext } from \"../machinecontext\"; // import React, { createContext, useContext, useState } from 'react';\n// import React, { createContext, useState } from \"react\";\n// const MachineContext = createContext();\n// export const MachineProvider = ({ children }) => {\n//   const [machineData, setMachineData] = useState();\n//   return (\n//     <MachineContext.Provider value={{ machineData, setMachineData }}>\n//       {children}\n//     </MachineContext.Provider>\n//   );\n// };\n// export const MachinePage = ({ machineData }) => {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachinePage = () => {\n  _s();\n\n  const {\n    machineData\n  } = useMachineContext();\n\n  if (!machineData) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      component: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: false,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          sx: {\n            alignItems: \"center\",\n            justifyContents: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Title, {\n              title: \"Molding Section Statistics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 13\n            }, this), machineData.map((machine, index) => {\n              // if (machine.prodRate!= 0)\n              machine.status = \"Online\"; // else\n              // machine.status = \"Offline\"\n\n              if (machine.material === undefined) machine.material = \"none\";\n              if (machine.moldMaker === undefined) machine.moldMaker = \"none\";\n              console.log(machine.moldMaker);\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true // xs={12}\n                ,\n                sm: 2,\n                md: 2,\n                lg: 2,\n                xl: 1,\n                sx: {\n                  alignItems: \"center\",\n                  justifyContents: \"center\",\n                  maxWidth: 100,\n                  marginBottom: 2,\n                  margin: 0,\n                  padding: 0\n                },\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: {\n                    pathname: `machines/:${machine.machineID}`\n                  },\n                  state: { ...machine\n                  },\n                  style: {\n                    textDecoration: \"none\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n                    machineId: machine.machineID,\n                    monaNumber: machine.monaNumber,\n                    moldId: machine.moldID,\n                    status: machine.status,\n                    moldShots: machine.moldShots,\n                    failedShots: machine.failedShots,\n                    prodRate: machine.prodRate,\n                    material: machine.material,\n                    moldMaker: machine.moldMaker,\n                    prod_startDate: moment(machine.prod_start_date).format(\"DD-MM-YYYY\"),\n                    prod_startTime: moment(machine.prod_start_date).format(\"kk:mm:ss\"),\n                    prod_endDate: moment(machine.prod_end_date).format(\"DD-MM-YYYY\"),\n                    prod_endTime: moment(machine.prod_end_date).format(\"kk:mm:ss\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 17\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(MachinePage, \"HZ8pcZ/efcaBBcbexPnL9EQOim0=\", false, function () {\n  return [useMachineContext];\n});\n\n_c = MachinePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachinePage\");","map":{"version":3,"names":["Box","Container","Grid","Link","MachineGrid","moment","Title","useMachineContext","MachinePage","machineData","alignItems","justifyContents","map","machine","index","status","material","undefined","moldMaker","console","log","maxWidth","marginBottom","margin","padding","pathname","machineID","textDecoration","monaNumber","moldID","moldShots","failedShots","prodRate","prod_start_date","format","prod_end_date"],"sources":["/home_2/university/mona/e17-co328-Analysis-Tool-for-Industrial-Images/web-app/src/components/pages/MachinePage.js"],"sourcesContent":["// import React from \"react\";\nimport { Box, Container, Grid } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"../machinegrid\";\nimport moment from \"moment\";\nimport { Title } from \"../title.js\";\nimport { useMachineContext } from \"../machinecontext\";\n// import React, { createContext, useContext, useState } from 'react';\n\n// import React, { createContext, useState } from \"react\";\n\n// const MachineContext = createContext();\n\n// export const MachineProvider = ({ children }) => {\n//   const [machineData, setMachineData] = useState();\n\n//   return (\n//     <MachineContext.Provider value={{ machineData, setMachineData }}>\n//       {children}\n//     </MachineContext.Provider>\n//   );\n// };\n\n// export const MachinePage = ({ machineData }) => {\nexport const MachinePage = () => {\n  const { machineData } = useMachineContext();\n  if( !machineData ){\n  return (\n    <Box component=\"main\">\n      <Container maxWidth={false}>\n        <Grid\n          container\n          spacing={3}\n          sx={{ alignItems: \"center\", justifyContents: \"center\" }}\n        >\n          <React.Fragment>\n            <Title title=\"Molding Section Statistics\" />\n\n            {machineData.map((machine, index) => {\n              // if (machine.prodRate!= 0)\n              machine.status = \"Online\";\n              // else\n              // machine.status = \"Offline\"\n\n              if (machine.material === undefined) machine.material = \"none\";\n              if (machine.moldMaker === undefined) machine.moldMaker = \"none\";\n\n              console.log(machine.moldMaker);\n              return (\n                <Grid\n                  item\n                  // xs={12}\n                  sm={2}\n                  md={2}\n                  lg={2}\n                  xl={1}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\",\n                    justifyContents: \"center\",\n                    maxWidth: 100,\n                    marginBottom: 2,\n                    margin: 0,\n                    padding: 0,\n                  }}\n                >\n                  <Link\n                    to={{ pathname: `machines/:${machine.machineID}` }}\n                    state={{ ...machine }}\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <MachineGrid\n                      machineId={machine.machineID}\n                      monaNumber={machine.monaNumber}\n                      moldId={machine.moldID}\n                      status={machine.status}\n                      moldShots={machine.moldShots}\n                      failedShots={machine.failedShots}\n                      prodRate={machine.prodRate}\n                      material={machine.material}\n                      moldMaker={machine.moldMaker}\n                      prod_startDate={moment(machine.prod_start_date).format(\n                        \"DD-MM-YYYY\"\n                      )}\n                      prod_startTime={moment(machine.prod_start_date).format(\n                        \"kk:mm:ss\"\n                      )}\n                      prod_endDate={moment(machine.prod_end_date).format(\n                        \"DD-MM-YYYY\"\n                      )}\n                      prod_endTime={moment(machine.prod_end_date).format(\n                        \"kk:mm:ss\"\n                      )}\n                    />\n                  </Link>\n                </Grid>\n              );\n            })}\n          </React.Fragment>\n        </Grid>\n      </Container>\n    </Box>\n  );\n          }\n\n  else{\n    return <div>connection not found</div>\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}