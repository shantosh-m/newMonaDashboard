{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MyDocu\\\\Monadashboard-final\\\\newMonaDashboard\\\\dashboard\\\\src\\\\contexts\\\\machinecontext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MachineContext = /*#__PURE__*/createContext();\n\nconst {\n  io\n} = require(\"socket.io-client\");\n\nexport const MachineProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [machineData, setMachineData] = useState();\n\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3002/gettingMachineInfo\");\n      setMachineData(response.data);\n      console.log(\"Backend API Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  }; //   useEffect(() => {\n  //     return () => {\n  //         socket.disconnect();\n  //     };\n  // }, []);\n\n\n  const setupSocketListener = () => {\n    const socket = io(\"http://localhost:3001\");\n    socket.on(\"updated_protector_messages\", updatedMessages => {\n      console.log(updatedMessages.type, \"type\");\n\n      if (updatedMessages.type == \"init\") {\n        setMachineData(state => {\n          if (machine.moldProtector == updatedMessages.protector_id) {\n            if (machine.moldMaterial != updatedMessages.data.moldMaterial || machine.moldMaker != updatedMessages.data.moldMaker || machine.monaNumber != updatedMessages.data.monaNumber) {\n              return { ...machine,\n                moldMaterial: updatedMessages.data.moldMaterial,\n                moldMaker: updatedMessages.data.moldMaker,\n                monaNumber: updatedMessages.data.monaNumber,\n                status: \"working\"\n              };\n            } else {\n              return machine;\n            }\n          } else {\n            const newMachine = {\n              moldProtector: updatedMessages.protector_id,\n              machineID: updatedMessages.data.machineID,\n              moldMaterial: updatedMessages.data.moldMaterial,\n              moldMaker: updatedMessages.data.moldMaker,\n              monaNumber: updatedMessages.data.monaNumber,\n              status: \"working\",\n              moldShots: 0,\n              failedShots: 0\n            };\n            return [...state, newMachine];\n          }\n        });\n      } else if (updatedMessages.type == \"run\") setMachineData(state => {\n        return state.map(machine => {\n          if (machine.moldProtector == updatedMessages.protector_id) {\n            console.log(\"success or fail\", updatedMessages.data.success);\n            if (updatedMessages.data.success == 1) return { ...machine,\n              moldShots: machine.moldShots + 1\n            };else updatedMessages.data.success == 0;\n            return { ...machine,\n              failedShots: machine.failedShots + 1\n            };\n          } else return machine;\n        });\n      });else if (updatedMessages.type == \"status\") setMachineData(state => {\n        return state.map(machine => {\n          if (machine.moldProtector == updatedMessages.protector_id) {\n            if (updatedMessages.data.status == \"working\" || updatedMessages.data.status == \"stuck\" || updatedMessages.data.status == \"error\" || updatedMessages.data.status == \"notWorking\") return { ...machine,\n              status: updatedMessages.data.status\n            };else return machine;\n          } else return machine;\n        });\n      });\n\n      console.log(updatedMessages.type, \"type\");\n      console.log(updatedMessages, \"up-msg\");\n      console.log(updatedMessages.data, \"status\"); // setProtectorMessages(updatedMessages);\n      // Object.entries(updatedMessages).forEach(([protectorId, messages]) => {\n      //     messages.forEach(message => {\n      //         console.log(`Message received from Protector ${protectorId}: total_shots: ${message.total_shots}, failed_shots: ${message.failed_shots}`);\n      //     });\n      // });\n    });\n  };\n\n  useEffect(() => {\n    fetchDataFromBackend(); // Fetch initial data when the component mounts\n\n    setupSocketListener();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MachineContext.Provider, {\n    value: {\n      machineData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MachineProvider, \"9ukQ3/1AJ2Gl+iZphDP9yxtVErA=\");\n\n_c = MachineProvider;\nexport const useMachineContext = () => {\n  _s2();\n\n  return useContext(MachineContext);\n};\n\n_s2(useMachineContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","socketIOClient","MachineContext","io","require","MachineProvider","children","machineData","setMachineData","fetchDataFromBackend","response","get","data","console","log","error","setupSocketListener","socket","on","updatedMessages","type","state","machine","moldProtector","protector_id","moldMaterial","moldMaker","monaNumber","status","newMachine","machineID","moldShots","failedShots","map","success","useMachineContext"],"sources":["C:/Users/user/Documents/MyDocu/Monadashboard-final/newMonaDashboard/dashboard/src/contexts/machinecontext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst MachineContext = createContext();\r\n\r\nconst { io } = require(\"socket.io-client\");\r\n\r\nexport const MachineProvider = ({ children }) => {\r\n  const [machineData, setMachineData] = useState();\r\n\r\n  const fetchDataFromBackend = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3002/gettingMachineInfo\"\r\n      );\r\n      setMachineData(response.data);\r\n      console.log(\"Backend API Response:\", response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching machine data:\", error);\r\n    }\r\n  };\r\n\r\n  //   useEffect(() => {\r\n\r\n  //     return () => {\r\n  //         socket.disconnect();\r\n  //     };\r\n  // }, []);\r\n\r\n  const setupSocketListener = () => {\r\n    const socket = io(\"http://localhost:3001\");\r\n    \r\n    socket.on(\"updated_protector_messages\", (updatedMessages) => {\r\n      console.log(updatedMessages.type, \"type\");\r\n        if (updatedMessages.type == \"init\") {\r\n          setMachineData((state) => {\r\n              \r\n              if (machine.moldProtector == updatedMessages.protector_id) {\r\n                  \r\n                      if (machine.moldMaterial != updatedMessages.data.moldMaterial || machine.moldMaker != updatedMessages.data.moldMaker || machine.monaNumber != updatedMessages.data.monaNumber) {\r\n                          return { ...machine, moldMaterial: updatedMessages.data.moldMaterial,moldMaker:updatedMessages.data.moldMaker,  monaNumber: updatedMessages.data.monaNumber, status: \"working\" };\r\n                      } else {\r\n                          return machine;\r\n                      }\r\n                  \r\n              } else {\r\n                  const newMachine = { moldProtector: updatedMessages.protector_id ,machineID: updatedMessages.data.machineID ,moldMaterial: updatedMessages.data.moldMaterial, moldMaker:updatedMessages.data.moldMaker,monaNumber: updatedMessages.data.monaNumber, status: \"working\", moldShots: 0, failedShots: 0 };\r\n                  return [...state, newMachine];\r\n              }\r\n          });\r\n      }\r\n      else if (updatedMessages.type == \"run\")\r\n        setMachineData((state) => {\r\n          return state.map((machine) => {\r\n            if (machine.moldProtector == updatedMessages.protector_id) {\r\n              console.log(\"success or fail\", updatedMessages.data.success);\r\n              if (updatedMessages.data.success == 1)\r\n                return { ...machine, moldShots: machine.moldShots + 1 };\r\n              else updatedMessages.data.success == 0;\r\n              return { ...machine, failedShots: machine.failedShots + 1 };\r\n            } else return machine;\r\n          });\r\n        });\r\n      else if (updatedMessages.type == \"status\")\r\n        setMachineData((state) => {\r\n          return state.map((machine) => {\r\n            if (machine.moldProtector == updatedMessages.protector_id) {\r\n              if (\r\n                updatedMessages.data.status == \"working\" ||\r\n                updatedMessages.data.status == \"stuck\" ||\r\n                updatedMessages.data.status == \"error\" ||\r\n                updatedMessages.data.status == \"notWorking\"\r\n              )\r\n                return { ...machine, status: updatedMessages.data.status };\r\n              else return machine;\r\n            } else return machine;\r\n          });\r\n        });\r\n      \r\n      console.log(updatedMessages.type, \"type\");\r\n      console.log(updatedMessages, \"up-msg\");\r\n      console.log(updatedMessages.data, \"status\");\r\n\r\n      // setProtectorMessages(updatedMessages);\r\n      // Object.entries(updatedMessages).forEach(([protectorId, messages]) => {\r\n      //     messages.forEach(message => {\r\n      //         console.log(`Message received from Protector ${protectorId}: total_shots: ${message.total_shots}, failed_shots: ${message.failed_shots}`);\r\n      //     });\r\n\r\n      // });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDataFromBackend(); // Fetch initial data when the component mounts\r\n    setupSocketListener();\r\n  }, []);\r\n\r\n  return (\r\n    <MachineContext.Provider value={{ machineData }}>\r\n      {children}\r\n    </MachineContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useMachineContext = () => {\r\n  return useContext(MachineContext);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}