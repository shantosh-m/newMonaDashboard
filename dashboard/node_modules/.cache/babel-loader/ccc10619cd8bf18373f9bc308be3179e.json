{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Request = exports.Polling = void 0;\n\nconst transport_js_1 = require(\"../transport.js\");\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\n\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\n\nconst engine_io_parser_1 = require(\"engine.io-parser\");\n\nconst xmlhttprequest_js_1 = require(\"./xmlhttprequest.js\");\n\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nconst util_js_1 = require(\"../util.js\");\n\nconst globalThis_js_1 = require(\"../globalThis.js\");\n\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\n\nfunction empty() {}\n\nconst hasXHR2 = function () {\n  const xhr = new xmlhttprequest_js_1.XHR({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\nclass Polling extends transport_js_1.Transport {\n  /**\r\n   * XHR Polling constructor.\r\n   *\r\n   * @param {Object} opts\r\n   * @api public\r\n   */\n  constructor(opts) {\n    super(opts);\n    this.polling = false;\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port; // some user agents have empty `location.port`\n\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\r\n     * XHR supports binary\r\n     */\n\n\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  /**\r\n   * Transport name.\r\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n  /**\r\n   * Opens the socket (triggers polling). We write a PING message to determine\r\n   * when the transport is open.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doOpen() {\n    this.poll();\n  }\n  /**\r\n   * Pauses polling.\r\n   *\r\n   * @param {Function} callback upon buffers are flushed and transport is paused\r\n   * @api private\r\n   */\n\n\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function () {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function () {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\r\n   * Starts polling cycle.\r\n   *\r\n   * @api public\r\n   */\n\n\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\r\n   * Overloads onData to detect payloads.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    debug(\"polling got data %s\", data);\n\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      } // if its a close packet, we close the ongoing requests\n\n\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      } // otherwise bypass onData and handle the message\n\n\n      this.onPacket(packet);\n    }; // decode payload\n\n\n    (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emitReserved(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n  /**\r\n   * For polling, send a close packet.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n  /**\r\n   * Writes a packets payload.\r\n   *\r\n   * @param {Array} data packets\r\n   * @param {Function} drain callback\r\n   * @api private\r\n   */\n\n\n  write(packets) {\n    this.writable = false;\n    (0, engine_io_parser_1.encodePayload)(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\"; // cache busting is forced\n\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    } // avoid port if default for schema\n\n\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n\n    const encodedQuery = (0, parseqs_js_1.encode)(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\r\n   * Creates a request.\r\n   *\r\n   * @param {String} method\r\n   * @api private\r\n   */\n\n\n  request() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(opts, {\n      xd: this.xd,\n      xs: this.xs\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\r\n   * Sends data.\r\n   *\r\n   * @param {String} data to send.\r\n   * @param {Function} called upon flush.\r\n   * @api private\r\n   */\n\n\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr post error\", xhrStatus, context);\n    });\n  }\n  /**\r\n   * Starts a poll cycle.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr poll error\", xhrStatus, context);\n    });\n    this.pollXhr = req;\n  }\n\n}\n\nexports.Polling = Polling;\n\nclass Request extends component_emitter_1.Emitter {\n  /**\r\n   * Request constructor\r\n   *\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  constructor(uri, opts) {\n    super();\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.create();\n  }\n  /**\r\n   * Creates the XHR object and sends the request.\r\n   *\r\n   * @api private\r\n   */\n\n\n  create() {\n    const opts = (0, util_js_1.pick)(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n    const xhr = this.xhr = new xmlhttprequest_js_1.XHR(opts);\n\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {} // ie6 check\n\n\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      xhr.onreadystatechange = () => {\n        if (4 !== xhr.readyState) return;\n\n        if (200 === xhr.status || 1223 === xhr.status) {\n          this.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          this.setTimeoutFn(() => {\n            this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n          }, 0);\n        }\n      };\n\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      this.setTimeoutFn(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\r\n   * Called upon error.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    this.emitReserved(\"error\", err, this.xhr);\n    this.cleanup(true);\n  }\n  /**\r\n   * Cleans up house.\r\n   *\r\n   * @api private\r\n   */\n\n\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n\n    this.xhr.onreadystatechange = empty;\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n  /**\r\n   * Called upon load.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onLoad() {\n    const data = this.xhr.responseText;\n\n    if (data !== null) {\n      this.emitReserved(\"data\", data);\n      this.emitReserved(\"success\");\n      this.cleanup();\n    }\n  }\n  /**\r\n   * Aborts the request.\r\n   *\r\n   * @api public\r\n   */\n\n\n  abort() {\n    this.cleanup();\n  }\n\n}\n\nexports.Request = Request;\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\n\nif (typeof document !== \"undefined\") {\n  // @ts-ignore\n  if (typeof attachEvent === \"function\") {\n    // @ts-ignore\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis_js_1.globalThisShim ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Request","Polling","transport_js_1","require","debug_1","yeast_js_1","parseqs_js_1","engine_io_parser_1","xmlhttprequest_js_1","component_emitter_1","util_js_1","globalThis_js_1","debug","default","empty","hasXHR2","xhr","XHR","xdomain","responseType","Transport","constructor","opts","polling","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","name","doOpen","poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","decodePayload","socket","binaryType","forEach","doClose","close","write","packets","encodePayload","doWrite","uri","query","schema","timestampRequests","timestampParam","yeast","sid","b64","Number","encodedQuery","encode","ipv6","indexOf","path","length","request","assign","fn","req","method","on","xhrStatus","context","onError","bind","pollXhr","Emitter","installTimerFunctions","async","undefined","create","pick","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","withCredentials","requestTimeout","timeout","onreadystatechange","status","onLoad","setTimeoutFn","send","document","index","requestsCount","requests","err","cleanup","fromError","abort","responseText","attachEvent","unloadHandler","addEventListener","terminationEvent","globalThisShim"],"sources":["C:/Users/user/Documents/MyDocu/Monadashboard-final/newMonaDashboard/dashboard/node_modules/engine.io-client/build/cjs/transports/polling.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Request = exports.Polling = void 0;\r\nconst transport_js_1 = require(\"../transport.js\");\r\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\r\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\r\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\r\nconst engine_io_parser_1 = require(\"engine.io-parser\");\r\nconst xmlhttprequest_js_1 = require(\"./xmlhttprequest.js\");\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst util_js_1 = require(\"../util.js\");\r\nconst globalThis_js_1 = require(\"../globalThis.js\");\r\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\r\nfunction empty() { }\r\nconst hasXHR2 = (function () {\r\n    const xhr = new xmlhttprequest_js_1.XHR({\r\n        xdomain: false\r\n    });\r\n    return null != xhr.responseType;\r\n})();\r\nclass Polling extends transport_js_1.Transport {\r\n    /**\r\n     * XHR Polling constructor.\r\n     *\r\n     * @param {Object} opts\r\n     * @api public\r\n     */\r\n    constructor(opts) {\r\n        super(opts);\r\n        this.polling = false;\r\n        if (typeof location !== \"undefined\") {\r\n            const isSSL = \"https:\" === location.protocol;\r\n            let port = location.port;\r\n            // some user agents have empty `location.port`\r\n            if (!port) {\r\n                port = isSSL ? \"443\" : \"80\";\r\n            }\r\n            this.xd =\r\n                (typeof location !== \"undefined\" &&\r\n                    opts.hostname !== location.hostname) ||\r\n                    port !== opts.port;\r\n            this.xs = opts.secure !== isSSL;\r\n        }\r\n        /**\r\n         * XHR supports binary\r\n         */\r\n        const forceBase64 = opts && opts.forceBase64;\r\n        this.supportsBinary = hasXHR2 && !forceBase64;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     */\r\n    get name() {\r\n        return \"polling\";\r\n    }\r\n    /**\r\n     * Opens the socket (triggers polling). We write a PING message to determine\r\n     * when the transport is open.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        this.poll();\r\n    }\r\n    /**\r\n     * Pauses polling.\r\n     *\r\n     * @param {Function} callback upon buffers are flushed and transport is paused\r\n     * @api private\r\n     */\r\n    pause(onPause) {\r\n        this.readyState = \"pausing\";\r\n        const pause = () => {\r\n            debug(\"paused\");\r\n            this.readyState = \"paused\";\r\n            onPause();\r\n        };\r\n        if (this.polling || !this.writable) {\r\n            let total = 0;\r\n            if (this.polling) {\r\n                debug(\"we are currently polling - waiting to pause\");\r\n                total++;\r\n                this.once(\"pollComplete\", function () {\r\n                    debug(\"pre-pause polling complete\");\r\n                    --total || pause();\r\n                });\r\n            }\r\n            if (!this.writable) {\r\n                debug(\"we are currently writing - waiting to pause\");\r\n                total++;\r\n                this.once(\"drain\", function () {\r\n                    debug(\"pre-pause writing complete\");\r\n                    --total || pause();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            pause();\r\n        }\r\n    }\r\n    /**\r\n     * Starts polling cycle.\r\n     *\r\n     * @api public\r\n     */\r\n    poll() {\r\n        debug(\"polling\");\r\n        this.polling = true;\r\n        this.doPoll();\r\n        this.emitReserved(\"poll\");\r\n    }\r\n    /**\r\n     * Overloads onData to detect payloads.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        debug(\"polling got data %s\", data);\r\n        const callback = packet => {\r\n            // if its the first message we consider the transport open\r\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\r\n                this.onOpen();\r\n            }\r\n            // if its a close packet, we close the ongoing requests\r\n            if (\"close\" === packet.type) {\r\n                this.onClose({ description: \"transport closed by the server\" });\r\n                return false;\r\n            }\r\n            // otherwise bypass onData and handle the message\r\n            this.onPacket(packet);\r\n        };\r\n        // decode payload\r\n        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\r\n        // if an event did not trigger closing\r\n        if (\"closed\" !== this.readyState) {\r\n            // if we got data we're not polling\r\n            this.polling = false;\r\n            this.emitReserved(\"pollComplete\");\r\n            if (\"open\" === this.readyState) {\r\n                this.poll();\r\n            }\r\n            else {\r\n                debug('ignoring poll - transport state \"%s\"', this.readyState);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * For polling, send a close packet.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        const close = () => {\r\n            debug(\"writing close packet\");\r\n            this.write([{ type: \"close\" }]);\r\n        };\r\n        if (\"open\" === this.readyState) {\r\n            debug(\"transport open - closing\");\r\n            close();\r\n        }\r\n        else {\r\n            // in case we're trying to close while\r\n            // handshaking is in progress (GH-164)\r\n            debug(\"transport not open - deferring close\");\r\n            this.once(\"open\", close);\r\n        }\r\n    }\r\n    /**\r\n     * Writes a packets payload.\r\n     *\r\n     * @param {Array} data packets\r\n     * @param {Function} drain callback\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        (0, engine_io_parser_1.encodePayload)(packets, data => {\r\n            this.doWrite(data, () => {\r\n                this.writable = true;\r\n                this.emitReserved(\"drain\");\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"https\" : \"http\";\r\n        let port = \"\";\r\n        // cache busting is forced\r\n        if (false !== this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\r\n        }\r\n        if (!this.supportsBinary && !query.sid) {\r\n            query.b64 = 1;\r\n        }\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        const encodedQuery = (0, parseqs_js_1.encode)(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n    /**\r\n     * Creates a request.\r\n     *\r\n     * @param {String} method\r\n     * @api private\r\n     */\r\n    request(opts = {}) {\r\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\r\n        return new Request(this.uri(), opts);\r\n    }\r\n    /**\r\n     * Sends data.\r\n     *\r\n     * @param {String} data to send.\r\n     * @param {Function} called upon flush.\r\n     * @api private\r\n     */\r\n    doWrite(data, fn) {\r\n        const req = this.request({\r\n            method: \"POST\",\r\n            data: data\r\n        });\r\n        req.on(\"success\", fn);\r\n        req.on(\"error\", (xhrStatus, context) => {\r\n            this.onError(\"xhr post error\", xhrStatus, context);\r\n        });\r\n    }\r\n    /**\r\n     * Starts a poll cycle.\r\n     *\r\n     * @api private\r\n     */\r\n    doPoll() {\r\n        debug(\"xhr poll\");\r\n        const req = this.request();\r\n        req.on(\"data\", this.onData.bind(this));\r\n        req.on(\"error\", (xhrStatus, context) => {\r\n            this.onError(\"xhr poll error\", xhrStatus, context);\r\n        });\r\n        this.pollXhr = req;\r\n    }\r\n}\r\nexports.Polling = Polling;\r\nclass Request extends component_emitter_1.Emitter {\r\n    /**\r\n     * Request constructor\r\n     *\r\n     * @param {Object} options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts) {\r\n        super();\r\n        (0, util_js_1.installTimerFunctions)(this, opts);\r\n        this.opts = opts;\r\n        this.method = opts.method || \"GET\";\r\n        this.uri = uri;\r\n        this.async = false !== opts.async;\r\n        this.data = undefined !== opts.data ? opts.data : null;\r\n        this.create();\r\n    }\r\n    /**\r\n     * Creates the XHR object and sends the request.\r\n     *\r\n     * @api private\r\n     */\r\n    create() {\r\n        const opts = (0, util_js_1.pick)(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\r\n        opts.xdomain = !!this.opts.xd;\r\n        opts.xscheme = !!this.opts.xs;\r\n        const xhr = (this.xhr = new xmlhttprequest_js_1.XHR(opts));\r\n        try {\r\n            debug(\"xhr open %s: %s\", this.method, this.uri);\r\n            xhr.open(this.method, this.uri, this.async);\r\n            try {\r\n                if (this.opts.extraHeaders) {\r\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n                    for (let i in this.opts.extraHeaders) {\r\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\r\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            if (\"POST\" === this.method) {\r\n                try {\r\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n                catch (e) { }\r\n            }\r\n            try {\r\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\r\n            }\r\n            catch (e) { }\r\n            // ie6 check\r\n            if (\"withCredentials\" in xhr) {\r\n                xhr.withCredentials = this.opts.withCredentials;\r\n            }\r\n            if (this.opts.requestTimeout) {\r\n                xhr.timeout = this.opts.requestTimeout;\r\n            }\r\n            xhr.onreadystatechange = () => {\r\n                if (4 !== xhr.readyState)\r\n                    return;\r\n                if (200 === xhr.status || 1223 === xhr.status) {\r\n                    this.onLoad();\r\n                }\r\n                else {\r\n                    // make sure the `error` event handler that's user-set\r\n                    // does not throw in the same tick and gets caught here\r\n                    this.setTimeoutFn(() => {\r\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\r\n                    }, 0);\r\n                }\r\n            };\r\n            debug(\"xhr data %s\", this.data);\r\n            xhr.send(this.data);\r\n        }\r\n        catch (e) {\r\n            // Need to defer since .create() is called directly from the constructor\r\n            // and thus the 'error' event can only be only bound *after* this exception\r\n            // occurs.  Therefore, also, we cannot throw here at all.\r\n            this.setTimeoutFn(() => {\r\n                this.onError(e);\r\n            }, 0);\r\n            return;\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            this.index = Request.requestsCount++;\r\n            Request.requests[this.index] = this;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon error.\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        this.emitReserved(\"error\", err, this.xhr);\r\n        this.cleanup(true);\r\n    }\r\n    /**\r\n     * Cleans up house.\r\n     *\r\n     * @api private\r\n     */\r\n    cleanup(fromError) {\r\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\r\n            return;\r\n        }\r\n        this.xhr.onreadystatechange = empty;\r\n        if (fromError) {\r\n            try {\r\n                this.xhr.abort();\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            delete Request.requests[this.index];\r\n        }\r\n        this.xhr = null;\r\n    }\r\n    /**\r\n     * Called upon load.\r\n     *\r\n     * @api private\r\n     */\r\n    onLoad() {\r\n        const data = this.xhr.responseText;\r\n        if (data !== null) {\r\n            this.emitReserved(\"data\", data);\r\n            this.emitReserved(\"success\");\r\n            this.cleanup();\r\n        }\r\n    }\r\n    /**\r\n     * Aborts the request.\r\n     *\r\n     * @api public\r\n     */\r\n    abort() {\r\n        this.cleanup();\r\n    }\r\n}\r\nexports.Request = Request;\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\nif (typeof document !== \"undefined\") {\r\n    // @ts-ignore\r\n    if (typeof attachEvent === \"function\") {\r\n        // @ts-ignore\r\n        attachEvent(\"onunload\", unloadHandler);\r\n    }\r\n    else if (typeof addEventListener === \"function\") {\r\n        const terminationEvent = \"onpagehide\" in globalThis_js_1.globalThisShim ? \"pagehide\" : \"unload\";\r\n        addEventListener(terminationEvent, unloadHandler, false);\r\n    }\r\n}\r\nfunction unloadHandler() {\r\n    for (let i in Request.requests) {\r\n        if (Request.requests.hasOwnProperty(i)) {\r\n            Request.requests[i].abort();\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}