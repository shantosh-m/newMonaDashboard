{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  // const { machineData } = useMachineContext();\n  const [machines, setMachines] = useState([]);\n  useEffect(() => {\n    generateMachineData();\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const generateMachineData = () => {\n    const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n    const Protector = [\"Protector1\", \"Protector2\", \"Protector3\", \"Protector4\", \"Protector5\", \"Protector6\", \"Protector7\", \"Protector8\", \"Protector9\", \"Protector10\", \"Protector11\", \"Protector12\", \"Protector13\", \"Protector14\", \"Protector15\", \"Protector16\", \"Protector17\", \"Protector18\", \"Protector19\", \"Protector20\", \"Protector21\", \"Protector22\", \"Protector23\"];\n    const Maker = [\"Maker1\", \"Maker2\", \"Maker3\", \"Maker4\", \"Maker5\", \"Maker6\", \"Maker7\", \"Maker8\", \"Maker9\", \"Maker10\", \"Maker11\", \"Maker12\", \"Maker13\", \"Maker14\", \"Maker15\", \"Maker16\", \"Maker17\", \"Maker18\", \"Maker19\", \"Maker20\", \"Maker21\", \"Maker22\", \"Maker23\"];\n    const mNumber = [\"M#123\", \"M#124\", \"M#125\", \"M#126\", \"M#127\", \"M#128_1\", \"M#129\", \"M#130\", \"M#131_1\", \"M#132\", \"M#133_2\", \"M#134\", \"M#135\", \"M#133_3\", \"M#137\", \"M#138\", \"M#128_2\", \"M#140\", \"M#141\", \"M#142\", \"M#143\", \"M#144\", \"M#145\"];\n    const newMachines = [];\n\n    for (let i = 0; i < 23; i++) {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      const statusOptions = [\"working\", \"notWorking\", \"stuck\"];\n      const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i - 1]],\n        moldProtector: Protector[i - 1],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i - 1],\n        moldShots: mold_shots,\n        failedShots: failed_shots\n      };\n      newMachines.push(machine);\n    }\n\n    setMachines(newMachines);\n  };\n\n  const updateMachineData = () => {\n    const updatedMachines = machines.map(machine => {\n      let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      let status = machine.status;\n\n      if (Math.random() < 0.1) {\n        status = \"stuck\";\n      } else if (Math.random() < 0.2) {\n        status = \"notWorking\";\n      } else {\n        status = \"working\";\n      }\n\n      return { ...machine,\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        status: status\n      };\n    });\n    setMachines(updatedMachines);\n  };\n\n  if (machines.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        sx: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\"\n        },\n        children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 11,\n          sm: 4,\n          md: 2,\n          lg: 2,\n          m: {\n            sm: 2,\n            md: 4,\n            lg: 0\n          },\n          sx: {\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: index !== 0 ? /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: `machines/:${machine.machineID}`\n            },\n            state: { ...machine\n            },\n            style: {\n              textDecoration: \"none\"\n            },\n            children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n              ID: machine.machineID,\n              monaNumber: machine.monaNumber,\n              moldProtector: machine.moldProtector,\n              status: machine.status,\n              moldMaker: machine.moldMaker,\n              moldMaterial: machine.moldMaterial,\n              moldShots: machine.moldShots,\n              failedShots: machine.failedShots\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(TimeGrid, {}, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(MachineList, \"etL6ZTbqU58vGaTbtLSSX9BCKmI=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useEffect","useState","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","machines","setMachines","generateMachineData","intervalId","setInterval","updateMachineData","clearInterval","Material","Protector","Maker","mNumber","newMachines","i","mold_shots","Math","floor","random","failed_shots","statusOptions","status","length","machine","machineID","monaNumber","moldProtector","moldMaterial","moldMaker","moldShots","failedShots","push","updatedMachines","map","display","alignItems","justifyContents","index","sm","md","lg","justifyContent","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Link from \"@mui/material/Link\";\n\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n\n  const [machines, setMachines] = useState([]);\n\n  useEffect(() => {\n    generateMachineData();\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n  const generateMachineData = () => {\n    const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n    const Protector = [\n      \"Protector1\",\n      \"Protector2\",\n      \"Protector3\",\n      \"Protector4\",\n      \"Protector5\",\n      \"Protector6\",\n      \"Protector7\",\n      \"Protector8\",\n      \"Protector9\",\n      \"Protector10\",\n      \"Protector11\",\n      \"Protector12\",\n      \"Protector13\",\n      \"Protector14\",\n      \"Protector15\",\n      \"Protector16\",\n      \"Protector17\",\n      \"Protector18\",\n      \"Protector19\",\n      \"Protector20\",\n      \"Protector21\",\n      \"Protector22\",\n      \"Protector23\",\n    ];\n\n    const Maker = [\n      \"Maker1\",\n      \"Maker2\",\n      \"Maker3\",\n      \"Maker4\",\n      \"Maker5\",\n      \"Maker6\",\n      \"Maker7\",\n      \"Maker8\",\n      \"Maker9\",\n      \"Maker10\",\n      \"Maker11\",\n      \"Maker12\",\n      \"Maker13\",\n      \"Maker14\",\n      \"Maker15\",\n      \"Maker16\",\n      \"Maker17\",\n      \"Maker18\",\n      \"Maker19\",\n      \"Maker20\",\n      \"Maker21\",\n      \"Maker22\",\n      \"Maker23\",\n    ];\n\n    const mNumber = [\n      \"M#123\",\n      \"M#124\",\n      \"M#125\",\n      \"M#126\",\n      \"M#127\",\n      \"M#128_1\",\n      \"M#129\",\n      \"M#130\",\n      \"M#131_1\",\n      \"M#132\",\n      \"M#133_2\",\n      \"M#134\",\n      \"M#135\",\n      \"M#133_3\",\n      \"M#137\",\n      \"M#138\",\n      \"M#128_2\",\n      \"M#140\",\n      \"M#141\",\n      \"M#142\",\n      \"M#143\",\n      \"M#144\",\n      \"M#145\",\n    ];\n\n    const newMachines = [];\n\n    for (let i = 0; i < 23; i++) {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n      const statusOptions = [\"working\", \"notWorking\", \"stuck\"];\n      const status =\n        statusOptions[Math.floor(Math.random() * statusOptions.length)];\n\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i - 1]],\n        moldProtector: Protector[i - 1],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i - 1],\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n      };\n      newMachines.push(machine);\n    }\n\n    setMachines(newMachines);\n  };\n\n  const updateMachineData = () => {\n    const updatedMachines = machines.map((machine) => {\n      let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n      let status = machine.status;\n\n      if (Math.random() < 0.1) {\n        status = \"stuck\";\n      } else if (Math.random() < 0.2) {\n        status = \"notWorking\";\n      } else {\n        status = \"working\";\n      }\n\n      return {\n        ...machine,\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        status: status,\n      };\n    });\n\n    setMachines(updatedMachines);\n  };\n\n  if (machines.length > 0) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n          }}\n        >\n          {machines.map((machine, index) => (\n            <Grid\n              item\n              xs={11}\n              sm={4}\n              md={2}\n              lg={2}\n              m={{ sm: 2, md: 4, lg: 0 }}\n              key={index}\n              sx={{\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {index !== 0 ? (\n                <Link\n                  to={{ pathname: `machines/:${machine.machineID}` }}\n                  state={{ ...machine }}\n                  style={{ textDecoration: \"none\" }}\n                >\n                  <MachineGrid\n                    ID={machine.machineID}\n                    monaNumber={machine.monaNumber}\n                    moldProtector={machine.moldProtector}\n                    status={machine.status}\n                    moldMaker={machine.moldMaker}\n                    moldMaterial={machine.moldMaterial}\n                    moldShots={machine.moldShots}\n                    failedShots={machine.failedShots}\n                  />\n                </Link>\n              ) : (\n                <TimeGrid key={index} />\n              )}\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}