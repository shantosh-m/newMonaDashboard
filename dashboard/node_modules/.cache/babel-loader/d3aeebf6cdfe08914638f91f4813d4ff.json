{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  const [machines, setMachines] = useState([]);\n  useEffect(() => {\n    const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n    const Protector = [\"Protector1\", \"Protector2\", \"Protector3\", \"Protector4\", \"Protector5\", \"Protector6\", \"Protector7\", \"Protector8\", \"Protector9\", \"Protector10\", \"Protector11\", \"Protector12\", \"Protector13\", \"Protector14\", \"Protector15\", \"Protector16\", \"Protector17\", \"Protector18\", \"Protector19\", \"Protector20\", \"Protector21\", \"Protector22\", \"Protector23\"];\n    const Maker = [\"Maker1\", \"Maker2\", \"Maker3\", \"Maker4\", \"Maker5\", \"Maker6\", \"Maker7\", \"Maker8\", \"Maker9\", \"Maker10\", \"Maker11\", \"Maker12\", \"Maker13\", \"Maker14\", \"Maker15\", \"Maker16\", \"Maker17\", \"Maker18\", \"Maker19\", \"Maker20\", \"Maker21\", \"Maker22\", \"Maker23\"];\n    const sta = [\"working\", \"notWorking\", \"stuck\"];\n\n    const updateMachineData = () => {\n      setMachines(prevMachines => {\n        return prevMachines.map(machine => {\n          let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n          let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0; // Choose a random status from the sta array\n\n          let status = sta[Math.floor(Math.random() * sta.length)]; // Ensure that \"stuck\" is selected fewer than two times\n\n          if (status === \"stuck\" && machine.status === \"stuck\") {\n            status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n          }\n\n          const updatedMachine = { ...machine,\n            moldShots: mold_shots,\n            failedShots: failed_shots,\n            status: status\n          };\n          return updatedMachine;\n        });\n      });\n    };\n\n    const intervalId = setInterval(updateMachineData, 10000); // Update every 10 seconds (adjust as needed)\n    // Cleanup interval on component unmount\n\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  if (machines.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        sx: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\"\n        },\n        children: machines.map((machine, index) => {\n          if (index !== 0) {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              sx: {\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: `machines/:${machine.machineID}`\n                },\n                state: { ...machine\n                },\n                style: {\n                  textDecoration: \"none\"\n                },\n                children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n                  ID: machine.machineID,\n                  monaNumber: machine.monaNumber,\n                  moldProtector: machine.moldProtector,\n                  status: machine.status,\n                  moldMaker: machine.moldMaker,\n                  moldMaterial: machine.moldMaterial,\n                  moldShots: machine.moldShots,\n                  failedShots: machine.failedShots\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              children: /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(MachineList, \"etL6ZTbqU58vGaTbtLSSX9BCKmI=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useState","useEffect","Container","Grid","Link","MachineGrid","TimeGrid","Title","MachineList","machines","setMachines","Material","Protector","Maker","sta","updateMachineData","prevMachines","map","machine","mold_shots","Math","floor","random","failed_shots","status","length","updatedMachine","moldShots","failedShots","intervalId","setInterval","clearInterval","display","alignItems","justifyContents","index","sm","md","lg","justifyContent","pathname","machineID","textDecoration","monaNumber","moldProtector","moldMaker","moldMaterial"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\n\nexport const MachineList = () => {\n  const [machines, setMachines] = useState([]);\n\n  useEffect(() => {\n    const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n    const Protector = [\n      \"Protector1\",\n      \"Protector2\",\n      \"Protector3\",\n      \"Protector4\",\n      \"Protector5\",\n      \"Protector6\",\n      \"Protector7\",\n      \"Protector8\",\n      \"Protector9\",\n      \"Protector10\",\n      \"Protector11\",\n      \"Protector12\",\n      \"Protector13\",\n      \"Protector14\",\n      \"Protector15\",\n      \"Protector16\",\n      \"Protector17\",\n      \"Protector18\",\n      \"Protector19\",\n      \"Protector20\",\n      \"Protector21\",\n      \"Protector22\",\n      \"Protector23\",\n    ];\n\n    const Maker = [\n      \"Maker1\",\n      \"Maker2\",\n      \"Maker3\",\n      \"Maker4\",\n      \"Maker5\",\n      \"Maker6\",\n      \"Maker7\",\n      \"Maker8\",\n      \"Maker9\",\n      \"Maker10\",\n      \"Maker11\",\n      \"Maker12\",\n      \"Maker13\",\n      \"Maker14\",\n      \"Maker15\",\n      \"Maker16\",\n      \"Maker17\",\n      \"Maker18\",\n      \"Maker19\",\n      \"Maker20\",\n      \"Maker21\",\n      \"Maker22\",\n      \"Maker23\",\n    ];\n    const sta = [\"working\", \"notWorking\", \"stuck\"];\n\n    const updateMachineData = () => {\n      setMachines((prevMachines) => {\n        return prevMachines.map((machine) => {\n          let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n          let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n          // Choose a random status from the sta array\n          let status = sta[Math.floor(Math.random() * sta.length)];\n\n          // Ensure that \"stuck\" is selected fewer than two times\n          if (status === \"stuck\" && machine.status === \"stuck\") {\n            status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n          }\n\n          const updatedMachine = {\n            ...machine,\n            moldShots: mold_shots,\n            failedShots: failed_shots,\n            status: status,\n          };\n\n          return updatedMachine;\n        });\n      });\n    };\n\n    const intervalId = setInterval(updateMachineData, 10000); // Update every 10 seconds (adjust as needed)\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  if (machines.length > 0) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n          }}\n        >\n          {machines.map((machine, index) => {\n            if (index !== 0) {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <Link\n                    to={{ pathname: `machines/:${machine.machineID}` }}\n                    state={{ ...machine }}\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <MachineGrid\n                      ID={machine.machineID}\n                      monaNumber={machine.monaNumber}\n                      moldProtector={machine.moldProtector}\n                      status={machine.status}\n                      moldMaker={machine.moldMaker}\n                      moldMaterial={machine.moldMaterial}\n                      moldShots={machine.moldShots}\n                      failedShots={machine.failedShots}\n                    />\n                  </Link>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                >\n                  <TimeGrid />\n                </Grid>\n              );\n            }\n          })}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>Connection not found</div>;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}