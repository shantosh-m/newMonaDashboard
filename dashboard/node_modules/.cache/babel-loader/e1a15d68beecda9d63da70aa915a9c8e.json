{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  const [machines, setMachines] = useState([]);\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  const Protector = [\"Protector1\", \"Protector2\"\n  /* ... */\n  ];\n  const Maker = [\"Maker1\", \"Maker2\"\n  /* ... */\n  ];\n  const mNumber = [\"M#123\", \"M#124\"\n  /* ... */\n  ];\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n  useEffect(() => {\n    setMachines(initializeMachines());\n  }, []);\n\n  const updateMachineData = () => {\n    const updatedMachines = machines.map(machine => {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      let status = machine.status;\n\n      if (status === \"stuck\" && machine.stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        machine.stuckCount++;\n      }\n\n      if (status === \"notWorking\" && machine.notWorkingCount >= 3) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        machine.notWorkingCount++;\n      }\n\n      return { ...machine,\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        status: status\n      };\n    });\n    setMachines(updatedMachines);\n  };\n\n  const initializeMachines = () => {\n    const initialMachines = [];\n    let stuckCount = 0;\n    let notWorkingCount = 0;\n\n    for (let i = 0; i < 24; i++) {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      let status = [\"working\", \"notWorking\", \"stuck\"][Math.floor(Math.random() * 3)];\n\n      if (status === \"stuck\" && stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        stuckCount++;\n      }\n\n      if (status === \"notWorking\" && notWorkingCount >= 3) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        notWorkingCount++;\n      }\n\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i - 1]],\n        moldProtector: Protector[i - 1],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i - 1],\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        stuckCount: stuckCount,\n        notWorkingCount: notWorkingCount\n      };\n      initialMachines.push(machine);\n    }\n\n    return initialMachines;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: \"Molding Section Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 11,\n        sm: 4,\n        md: 2,\n        lg: 2,\n        m: {\n          sm: 2,\n          md: 4,\n          lg: 0\n        },\n        sx: {\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: index !== 0 ? /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `machines/:${machine.machineID}`\n          },\n          state: { ...machine\n          },\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n            ID: machine.machineID,\n            monaNumber: machine.monaNumber,\n            moldProtector: machine.moldProtector,\n            status: machine.status,\n            moldMaker: machine.moldMaker,\n            moldMaterial: machine.moldMaterial,\n            moldShots: machine.moldShots,\n            failedShots: machine.failedShots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MachineList, \"xf/ld9baHigQEZsNJiqNOP72r5U=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useState","useEffect","Container","Grid","Link","MachineGrid","TimeGrid","Title","MachineList","machines","setMachines","Material","Protector","Maker","mNumber","intervalId","setInterval","updateMachineData","clearInterval","initializeMachines","updatedMachines","map","machine","mold_shots","Math","floor","random","failed_shots","status","stuckCount","notWorkingCount","moldShots","failedShots","initialMachines","i","machineID","monaNumber","moldProtector","moldMaterial","length","moldMaker","push","display","alignItems","justifyContent","index","sm","md","lg","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\n\nexport const MachineList = () => {\n  const [machines, setMachines] = useState([]);\n\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  const Protector = [\"Protector1\", \"Protector2\" /* ... */];\n  const Maker = [\"Maker1\", \"Maker2\" /* ... */];\n  const mNumber = [\"M#123\", \"M#124\" /* ... */];\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 5000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  useEffect(() => {\n    setMachines(initializeMachines());\n  }, []);\n\n  const updateMachineData = () => {\n    const updatedMachines = machines.map((machine) => {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      let status = machine.status;\n\n      if (status === \"stuck\" && machine.stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        machine.stuckCount++;\n      }\n\n      if (status === \"notWorking\" && machine.notWorkingCount >= 3) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        machine.notWorkingCount++;\n      }\n\n      return {\n        ...machine,\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        status: status,\n      };\n    });\n\n    setMachines(updatedMachines);\n  };\n\n  const initializeMachines = () => {\n    const initialMachines = [];\n    let stuckCount = 0;\n    let notWorkingCount = 0;\n\n    for (let i = 0; i < 24; i++) {\n      const mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n      const failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n      let status = [\"working\", \"notWorking\", \"stuck\"][\n        Math.floor(Math.random() * 3)\n      ];\n\n      if (status === \"stuck\" && stuckCount >= 2) {\n        status = \"working\";\n      } else if (status === \"stuck\") {\n        stuckCount++;\n      }\n\n      if (status === \"notWorking\" && notWorkingCount >= 3) {\n        status = \"working\";\n      } else if (status === \"notWorking\") {\n        notWorkingCount++;\n      }\n\n      const machine = {\n        machineID: i,\n        monaNumber: [mNumber[i - 1]],\n        moldProtector: Protector[i - 1],\n        status: status,\n        moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n        moldMaker: Maker[i - 1],\n        moldShots: mold_shots,\n        failedShots: failed_shots,\n        stuckCount: stuckCount,\n        notWorkingCount: notWorkingCount,\n      };\n      initialMachines.push(machine);\n    }\n\n    return initialMachines;\n  };\n\n  return (\n    <Container maxWidth={false}>\n      <Title title=\"Molding Section Statistics\" />\n\n      <Grid\n        container\n        spacing={4}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {machines.map((machine, index) => (\n          <Grid\n            item\n            xs={11}\n            sm={4}\n            md={2}\n            lg={2}\n            m={{ sm: 2, md: 4, lg: 0 }}\n            key={index}\n            sx={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {index !== 0 ? (\n              <Link\n                to={{ pathname: `machines/:${machine.machineID}` }}\n                state={{ ...machine }}\n                style={{ textDecoration: \"none\" }}\n              >\n                <MachineGrid\n                  ID={machine.machineID}\n                  monaNumber={machine.monaNumber}\n                  moldProtector={machine.moldProtector}\n                  status={machine.status}\n                  moldMaker={machine.moldMaker}\n                  moldMaterial={machine.moldMaterial}\n                  moldShots={machine.moldShots}\n                  failedShots={machine.failedShots}\n                />\n              </Link>\n            ) : (\n              <TimeGrid />\n            )}\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}