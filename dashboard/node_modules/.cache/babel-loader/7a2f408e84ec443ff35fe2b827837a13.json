{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nconst index_js_1 = require(\"./transports/index.js\");\n\nconst util_js_1 = require(\"./util.js\");\n\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\n\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nconst engine_io_parser_1 = require(\"engine.io-parser\");\n\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\n\nclass Socket extends component_emitter_1.Emitter {\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} opts - options\r\n   * @api public\r\n   */\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = (0, parseuri_js_1.parse)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n    }\n\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n    } // set on handshake\n\n\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null; // set on heartbeat\n\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        }, false);\n      }\n\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\n\n\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n    query.EIO = engine_io_parser_1.protocol; // transport name\n\n    query.transport = name; // session id if we already have one\n\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    debug(\"options: %j\", opts);\n    return new index_js_1.transports[name](opts);\n  }\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\n\n\n  open() {\n    let transport;\n\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n\n    this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\n\n\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    } // set up transport\n\n\n    this.transport = transport; // set up transport listeners\n\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", reason => this.onClose(\"transport close\", reason));\n  }\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\n\n\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\"); // @ts-ignore\n\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return; // Any callback called by transport should be ignored since now\n\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    } // Handle any error that happens while probing\n\n\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err); // @ts-ignore\n\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      this.emitReserved(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    } // When the socket is closed while we're probing\n\n\n    function onclose() {\n      onerror(\"socket closed\");\n    } // When the socket is upgraded while we're probing\n\n\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    } // Remove all listeners on the transport and on self\n\n\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush(); // we check for `readyState` in case an `open`\n    // listener already closed the socket\n\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n      this.emitReserved(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\"); // @ts-ignore\n\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} data - handshake obj\r\n   * @api private\r\n   */\n\n\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.maxPayload = data.maxPayload;\n    this.onOpen(); // In case open handler closes socket\n\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\n\n\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\n\n\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this.getWritablePackets();\n      debug(\"flushing %d packets in socket\", packets.length);\n      this.transport.send(packets); // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n\n      this.prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\r\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n   * long-polling)\r\n   *\r\n   * @private\r\n   */\n\n\n  getWritablePackets() {\n    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n\n    let payloadSize = 1; // first packet type\n\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n\n      if (data) {\n        payloadSize += (0, util_js_1.byteLength)(data);\n      }\n\n      if (i > 0 && payloadSize > this.maxPayload) {\n        debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n        return this.writeBuffer.slice(0, i);\n      }\n\n      payloadSize += 2; // separator + packet type\n    }\n\n    debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n    return this.writeBuffer;\n  }\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\n\n\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\n\n\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api public\r\n   */\n\n\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason); // clear timers\n\n      this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n      this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n      this.transport.close(); // ignore further transport communication\n\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      } // set ready state\n\n\n      this.readyState = \"closed\"; // clear session id\n\n      this.id = null; // emit close event\n\n      this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n      // grab the buffers on `close` event\n\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\n\n\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n\n    return filteredUpgrades;\n  }\n\n}\n\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","index_js_1","require","util_js_1","parseqs_js_1","parseuri_js_1","debug_1","component_emitter_1","engine_io_parser_1","debug","default","Emitter","constructor","uri","opts","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","readyState","writeBuffer","prevBufferLen","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","createTransport","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","byteLength","slice","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"sources":["C:/Users/user/Documents/MyDocu/Monadashboard-final/newMonaDashboard/dashboard/node_modules/engine.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst index_js_1 = require(\"./transports/index.js\");\r\nconst util_js_1 = require(\"./util.js\");\r\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\r\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\r\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst engine_io_parser_1 = require(\"engine.io-parser\");\r\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\r\nclass Socket extends component_emitter_1.Emitter {\r\n    /**\r\n     * Socket constructor.\r\n     *\r\n     * @param {String|Object} uri or options\r\n     * @param {Object} opts - options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts = {}) {\r\n        super();\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = null;\r\n        }\r\n        if (uri) {\r\n            uri = (0, parseuri_js_1.parse)(uri);\r\n            opts.hostname = uri.host;\r\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n            opts.port = uri.port;\r\n            if (uri.query)\r\n                opts.query = uri.query;\r\n        }\r\n        else if (opts.host) {\r\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\r\n        }\r\n        (0, util_js_1.installTimerFunctions)(this, opts);\r\n        this.secure =\r\n            null != opts.secure\r\n                ? opts.secure\r\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n        if (opts.hostname && !opts.port) {\r\n            // if no port is specified manually, use the protocol default\r\n            opts.port = this.secure ? \"443\" : \"80\";\r\n        }\r\n        this.hostname =\r\n            opts.hostname ||\r\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n        this.port =\r\n            opts.port ||\r\n                (typeof location !== \"undefined\" && location.port\r\n                    ? location.port\r\n                    : this.secure\r\n                        ? \"443\"\r\n                        : \"80\");\r\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n        this.readyState = \"\";\r\n        this.writeBuffer = [];\r\n        this.prevBufferLen = 0;\r\n        this.opts = Object.assign({\r\n            path: \"/engine.io\",\r\n            agent: false,\r\n            withCredentials: false,\r\n            upgrade: true,\r\n            timestampParam: \"t\",\r\n            rememberUpgrade: false,\r\n            rejectUnauthorized: true,\r\n            perMessageDeflate: {\r\n                threshold: 1024\r\n            },\r\n            transportOptions: {},\r\n            closeOnBeforeunload: true\r\n        }, opts);\r\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n        if (typeof this.opts.query === \"string\") {\r\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\r\n        }\r\n        // set on handshake\r\n        this.id = null;\r\n        this.upgrades = null;\r\n        this.pingInterval = null;\r\n        this.pingTimeout = null;\r\n        // set on heartbeat\r\n        this.pingTimeoutTimer = null;\r\n        if (typeof addEventListener === \"function\") {\r\n            if (this.opts.closeOnBeforeunload) {\r\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\r\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\r\n                // closed/reloaded)\r\n                addEventListener(\"beforeunload\", () => {\r\n                    if (this.transport) {\r\n                        // silently close the transport\r\n                        this.transport.removeAllListeners();\r\n                        this.transport.close();\r\n                    }\r\n                }, false);\r\n            }\r\n            if (this.hostname !== \"localhost\") {\r\n                this.offlineEventListener = () => {\r\n                    this.onClose(\"transport close\", {\r\n                        description: \"network connection lost\"\r\n                    });\r\n                };\r\n                addEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n        }\r\n        this.open();\r\n    }\r\n    /**\r\n     * Creates transport of the given type.\r\n     *\r\n     * @param {String} transport name\r\n     * @return {Transport}\r\n     * @api private\r\n     */\r\n    createTransport(name) {\r\n        debug('creating transport \"%s\"', name);\r\n        const query = Object.assign({}, this.opts.query);\r\n        // append engine.io protocol identifier\r\n        query.EIO = engine_io_parser_1.protocol;\r\n        // transport name\r\n        query.transport = name;\r\n        // session id if we already have one\r\n        if (this.id)\r\n            query.sid = this.id;\r\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\r\n            query,\r\n            socket: this,\r\n            hostname: this.hostname,\r\n            secure: this.secure,\r\n            port: this.port\r\n        });\r\n        debug(\"options: %j\", opts);\r\n        return new index_js_1.transports[name](opts);\r\n    }\r\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @api private\r\n     */\r\n    open() {\r\n        let transport;\r\n        if (this.opts.rememberUpgrade &&\r\n            Socket.priorWebsocketSuccess &&\r\n            this.transports.indexOf(\"websocket\") !== -1) {\r\n            transport = \"websocket\";\r\n        }\r\n        else if (0 === this.transports.length) {\r\n            // Emit error on next tick so it can be listened to\r\n            this.setTimeoutFn(() => {\r\n                this.emitReserved(\"error\", \"No transports available\");\r\n            }, 0);\r\n            return;\r\n        }\r\n        else {\r\n            transport = this.transports[0];\r\n        }\r\n        this.readyState = \"opening\";\r\n        // Retry with the next transport if the transport is disabled (jsonp: false)\r\n        try {\r\n            transport = this.createTransport(transport);\r\n        }\r\n        catch (e) {\r\n            debug(\"error while creating transport: %s\", e);\r\n            this.transports.shift();\r\n            this.open();\r\n            return;\r\n        }\r\n        transport.open();\r\n        this.setTransport(transport);\r\n    }\r\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @api private\r\n     */\r\n    setTransport(transport) {\r\n        debug(\"setting transport %s\", transport.name);\r\n        if (this.transport) {\r\n            debug(\"clearing existing transport %s\", this.transport.name);\r\n            this.transport.removeAllListeners();\r\n        }\r\n        // set up transport\r\n        this.transport = transport;\r\n        // set up transport listeners\r\n        transport\r\n            .on(\"drain\", this.onDrain.bind(this))\r\n            .on(\"packet\", this.onPacket.bind(this))\r\n            .on(\"error\", this.onError.bind(this))\r\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\r\n    }\r\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} transport name\r\n     * @api private\r\n     */\r\n    probe(name) {\r\n        debug('probing transport \"%s\"', name);\r\n        let transport = this.createTransport(name);\r\n        let failed = false;\r\n        Socket.priorWebsocketSuccess = false;\r\n        const onTransportOpen = () => {\r\n            if (failed)\r\n                return;\r\n            debug('probe transport \"%s\" opened', name);\r\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n            transport.once(\"packet\", msg => {\r\n                if (failed)\r\n                    return;\r\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n                    debug('probe transport \"%s\" pong', name);\r\n                    this.upgrading = true;\r\n                    this.emitReserved(\"upgrading\", transport);\r\n                    if (!transport)\r\n                        return;\r\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n                    debug('pausing current transport \"%s\"', this.transport.name);\r\n                    this.transport.pause(() => {\r\n                        if (failed)\r\n                            return;\r\n                        if (\"closed\" === this.readyState)\r\n                            return;\r\n                        debug(\"changing transport and sending upgrade packet\");\r\n                        cleanup();\r\n                        this.setTransport(transport);\r\n                        transport.send([{ type: \"upgrade\" }]);\r\n                        this.emitReserved(\"upgrade\", transport);\r\n                        transport = null;\r\n                        this.upgrading = false;\r\n                        this.flush();\r\n                    });\r\n                }\r\n                else {\r\n                    debug('probe transport \"%s\" failed', name);\r\n                    const err = new Error(\"probe error\");\r\n                    // @ts-ignore\r\n                    err.transport = transport.name;\r\n                    this.emitReserved(\"upgradeError\", err);\r\n                }\r\n            });\r\n        };\r\n        function freezeTransport() {\r\n            if (failed)\r\n                return;\r\n            // Any callback called by transport should be ignored since now\r\n            failed = true;\r\n            cleanup();\r\n            transport.close();\r\n            transport = null;\r\n        }\r\n        // Handle any error that happens while probing\r\n        const onerror = err => {\r\n            const error = new Error(\"probe error: \" + err);\r\n            // @ts-ignore\r\n            error.transport = transport.name;\r\n            freezeTransport();\r\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n            this.emitReserved(\"upgradeError\", error);\r\n        };\r\n        function onTransportClose() {\r\n            onerror(\"transport closed\");\r\n        }\r\n        // When the socket is closed while we're probing\r\n        function onclose() {\r\n            onerror(\"socket closed\");\r\n        }\r\n        // When the socket is upgraded while we're probing\r\n        function onupgrade(to) {\r\n            if (transport && to.name !== transport.name) {\r\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n                freezeTransport();\r\n            }\r\n        }\r\n        // Remove all listeners on the transport and on self\r\n        const cleanup = () => {\r\n            transport.removeListener(\"open\", onTransportOpen);\r\n            transport.removeListener(\"error\", onerror);\r\n            transport.removeListener(\"close\", onTransportClose);\r\n            this.off(\"close\", onclose);\r\n            this.off(\"upgrading\", onupgrade);\r\n        };\r\n        transport.once(\"open\", onTransportOpen);\r\n        transport.once(\"error\", onerror);\r\n        transport.once(\"close\", onTransportClose);\r\n        this.once(\"close\", onclose);\r\n        this.once(\"upgrading\", onupgrade);\r\n        transport.open();\r\n    }\r\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @api private\r\n     */\r\n    onOpen() {\r\n        debug(\"socket open\");\r\n        this.readyState = \"open\";\r\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n        this.emitReserved(\"open\");\r\n        this.flush();\r\n        // we check for `readyState` in case an `open`\r\n        // listener already closed the socket\r\n        if (\"open\" === this.readyState &&\r\n            this.opts.upgrade &&\r\n            this.transport.pause) {\r\n            debug(\"starting upgrade probes\");\r\n            let i = 0;\r\n            const l = this.upgrades.length;\r\n            for (; i < l; i++) {\r\n                this.probe(this.upgrades[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @api private\r\n     */\r\n    onPacket(packet) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n            this.emitReserved(\"packet\", packet);\r\n            // Socket is live - any packet counts\r\n            this.emitReserved(\"heartbeat\");\r\n            switch (packet.type) {\r\n                case \"open\":\r\n                    this.onHandshake(JSON.parse(packet.data));\r\n                    break;\r\n                case \"ping\":\r\n                    this.resetPingTimeout();\r\n                    this.sendPacket(\"pong\");\r\n                    this.emitReserved(\"ping\");\r\n                    this.emitReserved(\"pong\");\r\n                    break;\r\n                case \"error\":\r\n                    const err = new Error(\"server error\");\r\n                    // @ts-ignore\r\n                    err.code = packet.data;\r\n                    this.onError(err);\r\n                    break;\r\n                case \"message\":\r\n                    this.emitReserved(\"data\", packet.data);\r\n                    this.emitReserved(\"message\", packet.data);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            debug('packet received with socket readyState \"%s\"', this.readyState);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} data - handshake obj\r\n     * @api private\r\n     */\r\n    onHandshake(data) {\r\n        this.emitReserved(\"handshake\", data);\r\n        this.id = data.sid;\r\n        this.transport.query.sid = data.sid;\r\n        this.upgrades = this.filterUpgrades(data.upgrades);\r\n        this.pingInterval = data.pingInterval;\r\n        this.pingTimeout = data.pingTimeout;\r\n        this.maxPayload = data.maxPayload;\r\n        this.onOpen();\r\n        // In case open handler closes socket\r\n        if (\"closed\" === this.readyState)\r\n            return;\r\n        this.resetPingTimeout();\r\n    }\r\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @api private\r\n     */\r\n    resetPingTimeout() {\r\n        this.clearTimeoutFn(this.pingTimeoutTimer);\r\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\r\n            this.onClose(\"ping timeout\");\r\n        }, this.pingInterval + this.pingTimeout);\r\n        if (this.opts.autoUnref) {\r\n            this.pingTimeoutTimer.unref();\r\n        }\r\n    }\r\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @api private\r\n     */\r\n    onDrain() {\r\n        this.writeBuffer.splice(0, this.prevBufferLen);\r\n        // setting prevBufferLen = 0 is very important\r\n        // for example, when upgrading, upgrade packet is sent over,\r\n        // and a nonzero prevBufferLen could cause problems on `drain`\r\n        this.prevBufferLen = 0;\r\n        if (0 === this.writeBuffer.length) {\r\n            this.emitReserved(\"drain\");\r\n        }\r\n        else {\r\n            this.flush();\r\n        }\r\n    }\r\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @api private\r\n     */\r\n    flush() {\r\n        if (\"closed\" !== this.readyState &&\r\n            this.transport.writable &&\r\n            !this.upgrading &&\r\n            this.writeBuffer.length) {\r\n            const packets = this.getWritablePackets();\r\n            debug(\"flushing %d packets in socket\", packets.length);\r\n            this.transport.send(packets);\r\n            // keep track of current length of writeBuffer\r\n            // splice writeBuffer and callbackBuffer on `drain`\r\n            this.prevBufferLen = packets.length;\r\n            this.emitReserved(\"flush\");\r\n        }\r\n    }\r\n    /**\r\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n     * long-polling)\r\n     *\r\n     * @private\r\n     */\r\n    getWritablePackets() {\r\n        const shouldCheckPayloadSize = this.maxPayload &&\r\n            this.transport.name === \"polling\" &&\r\n            this.writeBuffer.length > 1;\r\n        if (!shouldCheckPayloadSize) {\r\n            return this.writeBuffer;\r\n        }\r\n        let payloadSize = 1; // first packet type\r\n        for (let i = 0; i < this.writeBuffer.length; i++) {\r\n            const data = this.writeBuffer[i].data;\r\n            if (data) {\r\n                payloadSize += (0, util_js_1.byteLength)(data);\r\n            }\r\n            if (i > 0 && payloadSize > this.maxPayload) {\r\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\r\n                return this.writeBuffer.slice(0, i);\r\n            }\r\n            payloadSize += 2; // separator + packet type\r\n        }\r\n        debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\r\n        return this.writeBuffer;\r\n    }\r\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} message.\r\n     * @param {Function} callback function.\r\n     * @param {Object} options.\r\n     * @return {Socket} for chaining.\r\n     * @api public\r\n     */\r\n    write(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    send(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @api private\r\n     */\r\n    sendPacket(type, data, options, fn) {\r\n        if (\"function\" === typeof data) {\r\n            fn = data;\r\n            data = undefined;\r\n        }\r\n        if (\"function\" === typeof options) {\r\n            fn = options;\r\n            options = null;\r\n        }\r\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n            return;\r\n        }\r\n        options = options || {};\r\n        options.compress = false !== options.compress;\r\n        const packet = {\r\n            type: type,\r\n            data: data,\r\n            options: options\r\n        };\r\n        this.emitReserved(\"packetCreate\", packet);\r\n        this.writeBuffer.push(packet);\r\n        if (fn)\r\n            this.once(\"flush\", fn);\r\n        this.flush();\r\n    }\r\n    /**\r\n     * Closes the connection.\r\n     *\r\n     * @api public\r\n     */\r\n    close() {\r\n        const close = () => {\r\n            this.onClose(\"forced close\");\r\n            debug(\"socket closing - telling transport to close\");\r\n            this.transport.close();\r\n        };\r\n        const cleanupAndClose = () => {\r\n            this.off(\"upgrade\", cleanupAndClose);\r\n            this.off(\"upgradeError\", cleanupAndClose);\r\n            close();\r\n        };\r\n        const waitForUpgrade = () => {\r\n            // wait for upgrade to finish since we can't send packets while pausing a transport\r\n            this.once(\"upgrade\", cleanupAndClose);\r\n            this.once(\"upgradeError\", cleanupAndClose);\r\n        };\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.readyState = \"closing\";\r\n            if (this.writeBuffer.length) {\r\n                this.once(\"drain\", () => {\r\n                    if (this.upgrading) {\r\n                        waitForUpgrade();\r\n                    }\r\n                    else {\r\n                        close();\r\n                    }\r\n                });\r\n            }\r\n            else if (this.upgrading) {\r\n                waitForUpgrade();\r\n            }\r\n            else {\r\n                close();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        debug(\"socket error %j\", err);\r\n        Socket.priorWebsocketSuccess = false;\r\n        this.emitReserved(\"error\", err);\r\n        this.onClose(\"transport error\", err);\r\n    }\r\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @api private\r\n     */\r\n    onClose(reason, description) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            debug('socket close with reason: \"%s\"', reason);\r\n            // clear timers\r\n            this.clearTimeoutFn(this.pingTimeoutTimer);\r\n            // stop event from firing again for transport\r\n            this.transport.removeAllListeners(\"close\");\r\n            // ensure transport won't stay open\r\n            this.transport.close();\r\n            // ignore further transport communication\r\n            this.transport.removeAllListeners();\r\n            if (typeof removeEventListener === \"function\") {\r\n                removeEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n            // set ready state\r\n            this.readyState = \"closed\";\r\n            // clear session id\r\n            this.id = null;\r\n            // emit close event\r\n            this.emitReserved(\"close\", reason, description);\r\n            // clean buffers after, so users can still\r\n            // grab the buffers on `close` event\r\n            this.writeBuffer = [];\r\n            this.prevBufferLen = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} server upgrades\r\n     * @api private\r\n     *\r\n     */\r\n    filterUpgrades(upgrades) {\r\n        const filteredUpgrades = [];\r\n        let i = 0;\r\n        const j = upgrades.length;\r\n        for (; i < j; i++) {\r\n            if (~this.transports.indexOf(upgrades[i]))\r\n                filteredUpgrades.push(upgrades[i]);\r\n        }\r\n        return filteredUpgrades;\r\n    }\r\n}\r\nexports.Socket = Socket;\r\nSocket.protocol = engine_io_parser_1.protocol;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}