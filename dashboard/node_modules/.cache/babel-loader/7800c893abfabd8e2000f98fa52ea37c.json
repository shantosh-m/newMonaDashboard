{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MyDocu\\\\Monadashboard-final\\\\newMonaDashboard\\\\dashboard\\\\src\\\\components\\\\progress\\\\utils\\\\progressgrid.js\",\n    _s = $RefreshSig$();\n\n// import { Grid } from \"@mui/material\";\n// export const  = () => {\n//   return <div className=\"working_machine\">hi</div>;\n// };\nimport React, { useState, useEffect } from \"react\";\nimport \"./progressgrid11.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip);\nexport const options = {\n  responsive: true,\n  scales: {\n    x: {\n      title: {\n        display: false\n      },\n      labels: [\"\", \"\", \"\", \"\", \"\"],\n      // Add empty strings as labels\n      grid: {\n        display: false // Hide x-axis grid lines\n\n      },\n      ticks: {\n        display: false,\n        maxTicksLimit: 5,\n        // Limit the number of ticks to the number of labels\n        fontsize: 0\n      }\n    },\n    y: {\n      title: {\n        display: false\n      },\n      grid: {\n        display: false // Hide x-axis grid lines\n\n      },\n      ticks: {\n        display: false,\n        // Hide x-axis ticks (values)\n        min: 0\n      }\n    }\n  }\n};\nconst MAX_POINTS = 5; // Maximum number of points to display\n\nconst initialData = {\n  labels: Array.from({\n    length: 5\n  }),\n  datasets: [{\n    data: [],\n    borderColor: \"rgb(53, 162, 235)\",\n    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n    fill: true\n  }]\n};\nexport const ProgressGrid = () => {\n  _s();\n\n  const [data, setData] = useState(initialData);\n  const [lastHourRate, setLastHourRate] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Generate a new random production value\n      // const randomValue = Math.floor(Math.random() * 25) + 10;\n      // Update the data state with the new value\n      setData(prevData => {\n        const newData = [...prevData.datasets[0].data, lastHourRate]; // Ensure the data points are limited to MAX_POINTS\n\n        const slicedData = newData.slice(-MAX_POINTS);\n        return { ...prevData,\n          datasets: [{ ...prevData.datasets[0],\n            data: slicedData\n          }]\n        };\n      });\n    }, 6000); // Update every second\n\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\n  }, [lastHourRate]);\n  const [filled, setFilled] = useState(0);\n  const [isRunning] = useState(true); // Start the progress bar when the component mounts\n\n  const targetValue = Math.floor(Math.random() * (90 - 50 + 1)) + 30; // Generates a random number between 50 and 80\n\n  useEffect(() => {\n    if (filled < targetValue && isRunning) {\n      setTimeout(() => setFilled(prev => prev + 2), 50);\n    }\n  }, [filled, isRunning]);\n  const progressPercent = filled + \"%\";\n  const last_hour_rate = Math.floor(Math.random() * (100 - 60 + 1)) + 60; // Example range: 100 to 60\n\n  useEffect(() => {\n    setLastHourRate(last_hour_rate);\n  }, [last_hour_rate]);\n  const [target_shot] = useState(() => {\n    // Example range: 10000 to 30000\n    return Math.floor(Math.random() * (30000 - 10000 + 1)) + 10000;\n  });\n  const finished_shot = Math.round(filled / 100 * target_shot);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"working_machine1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab_full_background\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MoldID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./headerfill-vector.svg\",\n          alt: \"Header SVG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab_bodyprogress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph_last_hour\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graph_margin\",\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              options: options,\n              data: data,\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                style: {\n                  height: \"100%\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"last_hour_box\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"last_hour_rate\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: last_hour_rate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tooltip\",\n                children: \"HOURLY RATE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progressbar_margin\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"target\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [finished_shot, \" \", \">>\", \" \", target_shot]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progressbar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: \"100%\",\n                width: progressPercent,\n                backgroundColor: \"#3E8BFF\",\n                transition: \"width 0.5s\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgressGrid, \"KmiZFXBWUIkJmsmF3yc+Y/nItx8=\");\n\n_c = ProgressGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressGrid\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Line","register","options","responsive","scales","x","title","display","labels","grid","ticks","maxTicksLimit","fontsize","y","min","MAX_POINTS","initialData","Array","from","length","datasets","data","borderColor","backgroundColor","fill","ProgressGrid","setData","lastHourRate","setLastHourRate","interval","setInterval","prevData","newData","slicedData","slice","clearInterval","filled","setFilled","isRunning","targetValue","Math","floor","random","setTimeout","prev","progressPercent","last_hour_rate","target_shot","finished_shot","round","height","width","transition"],"sources":["C:/Users/user/Documents/MyDocu/Monadashboard-final/newMonaDashboard/dashboard/src/components/progress/utils/progressgrid.js"],"sourcesContent":["// import { Grid } from \"@mui/material\";\r\n\r\n// export const  = () => {\r\n//   return <div className=\"working_machine\">hi</div>;\r\n// };\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./progressgrid11.css\";\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n} from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip\r\n);\r\n\r\nexport const options = {\r\n  responsive: true,\r\n\r\n  scales: {\r\n    x: {\r\n      title: {\r\n        display: false,\r\n      },\r\n      labels: [\"\", \"\", \"\", \"\", \"\"], // Add empty strings as labels\r\n      grid: {\r\n        display: false, // Hide x-axis grid lines\r\n      },\r\n      ticks: {\r\n        display: false,\r\n        maxTicksLimit: 5, // Limit the number of ticks to the number of labels\r\n        fontsize: 0,\r\n      },\r\n    },\r\n    y: {\r\n      title: {\r\n        display: false,\r\n      },\r\n      grid: {\r\n        display: false, // Hide x-axis grid lines\r\n      },\r\n      ticks: {\r\n        display: false, // Hide x-axis ticks (values)\r\n        min: 0,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst MAX_POINTS = 5; // Maximum number of points to display\r\n\r\nconst initialData = {\r\n  labels: Array.from({ length: 5 }),\r\n  datasets: [\r\n    {\r\n      data: [],\r\n      borderColor: \"rgb(53, 162, 235)\",\r\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n      fill: true,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const ProgressGrid = () => {\r\n  const [data, setData] = useState(initialData);\r\n  const [lastHourRate, setLastHourRate] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // Generate a new random production value\r\n      // const randomValue = Math.floor(Math.random() * 25) + 10;\r\n\r\n      // Update the data state with the new value\r\n      setData((prevData) => {\r\n        const newData = [...prevData.datasets[0].data, lastHourRate];\r\n\r\n        // Ensure the data points are limited to MAX_POINTS\r\n        const slicedData = newData.slice(-MAX_POINTS);\r\n\r\n        return {\r\n          ...prevData,\r\n          datasets: [\r\n            {\r\n              ...prevData.datasets[0],\r\n              data: slicedData,\r\n            },\r\n          ],\r\n        };\r\n      });\r\n    }, 6000); // Update every second\r\n\r\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\r\n  }, [lastHourRate]);\r\n\r\n  const [filled, setFilled] = useState(0);\r\n  const [isRunning] = useState(true); // Start the progress bar when the component mounts\r\n\r\n  const targetValue = Math.floor(Math.random() * (90 - 50 + 1)) + 30; // Generates a random number between 50 and 80\r\n\r\n  useEffect(() => {\r\n    if (filled < targetValue && isRunning) {\r\n      setTimeout(() => setFilled((prev) => prev + 2), 50);\r\n    }\r\n  }, [filled, isRunning]);\r\n\r\n  const progressPercent = filled + \"%\";\r\n\r\n  const last_hour_rate = Math.floor(Math.random() * (100 - 60 + 1)) + 60; // Example range: 100 to 60\r\n  useEffect(() => {\r\n    setLastHourRate(last_hour_rate);\r\n  }, [last_hour_rate]);\r\n\r\n  const [target_shot] = useState(() => {\r\n    // Example range: 10000 to 30000\r\n    return Math.floor(Math.random() * (30000 - 10000 + 1)) + 10000;\r\n  });\r\n  const finished_shot = Math.round((filled / 100) * target_shot);\r\n\r\n  return (\r\n    <div className=\"working_machine1\">\r\n      <div className=\"tab_full_background\">\r\n        <div className=\"header-box\">\r\n          <span>MoldID</span>\r\n          <img src=\"./headerfill-vector.svg\" alt=\"Header SVG\" />\r\n        </div>\r\n        <div className=\"tab_bodyprogress\">\r\n          <div className=\"graph_last_hour\">\r\n            <div className=\"graph_margin\">\r\n              <Line options={options} data={data}>\r\n                <canvas style={{ height: \"100%\" }}></canvas>\r\n              </Line>\r\n            </div>\r\n            <div className=\"last_hour_box\">\r\n              <div className=\"last_hour_rate\">\r\n                <span>{last_hour_rate}</span>\r\n                <div className=\"tooltip\">HOURLY RATE</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"progressbar_margin\">\r\n            <div className=\"target\">\r\n              <span>\r\n                {finished_shot} {\">>\"} {target_shot}\r\n              </span>\r\n            </div>\r\n            <div className=\"progressbar\">\r\n              <div\r\n                style={{\r\n                  height: \"100%\",\r\n                  width: progressPercent,\r\n                  backgroundColor: \"#3E8BFF\",\r\n                  transition: \"width 0.5s\",\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}