{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\progress\\\\utils\\\\progressgrid.js\",\n    _s = $RefreshSig$();\n\n// import { Grid } from \"@mui/material\";\n// export const  = () => {\n//   return <div className=\"working_machine\">hi</div>;\n// };\nimport React, { useState, useEffect } from \"react\";\nimport \"./progressgrid11.css\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip);\nexport const options = {\n  responsive: true,\n  scales: {\n    x: {\n      type: \"category\",\n      title: {\n        display: true,\n        text: \"\"\n      },\n      labels: Array.from({\n        length: 25\n      }, () => \"\") // Add empty strings as labels\n\n    },\n    y: {\n      title: {\n        display: true,\n        text: \"\"\n      }\n    }\n  }\n};\nconst MAX_POINTS = 25; // Maximum number of points to display\n\nconst initialData = {\n  labels: Array.from({\n    length: 25\n  }, () => \"\"),\n  datasets: [{\n    data: [],\n    borderColor: \"rgb(53, 162, 235)\",\n    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n    fill: true\n  }]\n};\nexport const ProgressGrid = () => {\n  _s();\n\n  const [data, setData] = useState(initialData);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Generate a new random production value\n      const randomValue = Math.floor(Math.random() * 10) + 1; // Update the data state with the new value\n\n      setData(prevData => {\n        const newData = [...prevData.datasets[0].data, randomValue].slice(-MAX_POINTS);\n        return { ...prevData,\n          datasets: [{ ...prevData.datasets[0],\n            data: newData\n          }]\n        };\n      });\n    }, 1000); // Update every second\n\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\n  }, []); // Empty dependency array to run the effect only once\n\n  const [filled, setFilled] = useState(0);\n  const [isRunning] = useState(true); // Start the progress bar when the component mounts\n\n  const targetValue = Math.floor(Math.random() * (90 - 50 + 1)) + 30; // Generates a random number between 50 and 80\n\n  useEffect(() => {\n    if (filled < targetValue && isRunning) {\n      setTimeout(() => setFilled(prev => prev + 2), 50);\n    }\n  }, [filled, isRunning]);\n  const progressPercent = filled + \"%\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"working_machine1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab_full_background\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MoldID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./headerfill-vector.svg\",\n          alt: \"Header SVG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab_body#\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph_margin\",\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            options: options,\n            data: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progressbar_margin\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progressbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: \"100%\",\n                width: progressPercent,\n                backgroundColor: \"#3E8BFF\",\n                transition: \"width 0.5s\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"progressPercent\",\n              children: progressPercent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgressGrid, \"f19KuSid7bfuIwhzGeZLqHQcI0g=\");\n\n_c = ProgressGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressGrid\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Line","register","options","responsive","scales","x","type","title","display","text","labels","Array","from","length","y","MAX_POINTS","initialData","datasets","data","borderColor","backgroundColor","fill","ProgressGrid","setData","interval","setInterval","randomValue","Math","floor","random","prevData","newData","slice","clearInterval","filled","setFilled","isRunning","targetValue","setTimeout","prev","progressPercent","height","width","transition"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/progress/utils/progressgrid.js"],"sourcesContent":["// import { Grid } from \"@mui/material\";\n\n// export const  = () => {\n//   return <div className=\"working_machine\">hi</div>;\n// };\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./progressgrid11.css\";\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip\n);\n\nexport const options = {\n  responsive: true,\n\n  scales: {\n    x: {\n      type: \"category\",\n      title: {\n        display: true,\n        text: \"\",\n      },\n      labels: Array.from({ length: 25 }, () => \"\"), // Add empty strings as labels\n    },\n    y: {\n      title: {\n        display: true,\n        text: \"\",\n      },\n    },\n  },\n};\n\nconst MAX_POINTS = 25; // Maximum number of points to display\n\nconst initialData = {\n  labels: Array.from({ length: 25 }, () => \"\"),\n  datasets: [\n    {\n      data: [],\n      borderColor: \"rgb(53, 162, 235)\",\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n      fill: true,\n    },\n  ],\n};\n\nexport const ProgressGrid = () => {\n  const [data, setData] = useState(initialData);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Generate a new random production value\n      const randomValue = Math.floor(Math.random() * 10) + 1;\n\n      // Update the data state with the new value\n      setData((prevData) => {\n        const newData = [...prevData.datasets[0].data, randomValue].slice(\n          -MAX_POINTS\n        );\n\n        return {\n          ...prevData,\n          datasets: [\n            {\n              ...prevData.datasets[0],\n              data: newData,\n            },\n          ],\n        };\n      });\n    }, 1000); // Update every second\n\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\n  }, []); // Empty dependency array to run the effect only once\n\n  const [filled, setFilled] = useState(0);\n  const [isRunning] = useState(true); // Start the progress bar when the component mounts\n\n  const targetValue = Math.floor(Math.random() * (90 - 50 + 1)) + 30; // Generates a random number between 50 and 80\n\n  useEffect(() => {\n    if (filled < targetValue && isRunning) {\n      setTimeout(() => setFilled((prev) => prev + 2), 50);\n    }\n  }, [filled, isRunning]);\n\n  const progressPercent = filled + \"%\";\n\n  return (\n    <div className=\"working_machine1\">\n      <div className=\"tab_full_background\">\n        <div className=\"header-box\">\n          <span>MoldID</span>\n          <img src=\"./headerfill-vector.svg\" alt=\"Header SVG\" />\n        </div>\n        <div className=\"tab_body#\">\n          <div className=\"graph_margin\">\n            <Line options={options} data={data} />\n          </div>\n          <div className=\"progressbar_margin\">\n            <div className=\"progressbar\">\n              <div\n                style={{\n                  height: \"100%\",\n                  width: progressPercent,\n                  backgroundColor: \"#3E8BFF\",\n                  transition: \"width 0.5s\",\n                }}\n              ></div>\n              <span className=\"progressPercent\">{progressPercent}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}