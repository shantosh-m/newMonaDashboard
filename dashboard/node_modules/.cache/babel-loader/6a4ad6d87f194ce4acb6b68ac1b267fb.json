{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MachineList = () => {\n  _s();\n\n  const [machines, setMachines] = useState([]);\n  const [time, setTime] = useState(new Date());\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  const Protector = [\"Protector1\", \"Protector2\"\n  /*...*/\n  ];\n  const Maker = [\"Maker1\", \"Maker2\"\n  /*...*/\n  ];\n  const mNumber = [\"M#123\", \"M#124\"\n  /*...*/\n  ];\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  let stuckCount = 0;\n  let notWorkingCount = 0;\n  useEffect(() => {\n    const updateMachines = () => {\n      const updatedMachines = machines.map(machine => {\n        let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n        let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n        let status = sta[Math.floor(Math.random() * sta.length)];\n\n        if (status === \"stuck\" && stuckCount >= 2) {\n          status = \"working\";\n        } else if (status === \"stuck\") {\n          stuckCount++;\n        }\n\n        if (status === \"notWorking\" && notWorkingCount >= 3) {\n          status = \"working\";\n        } else if (status === \"notWorking\") {\n          notWorkingCount++;\n        }\n\n        return { ...machine,\n          monaNumber: [mNumber[machine.machineID - 1]],\n          moldProtector: Protector[machine.machineID - 1],\n          status: status,\n          moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n          moldMaker: Maker[machine.machineID - 1],\n          moldShots: mold_shots,\n          failedShots: failed_shots\n        };\n      });\n      setMachines(updatedMachines);\n      setTime(new Date());\n    }; // Update every 10 seconds (adjust the interval as needed)\n\n\n    const intervalId = setInterval(updateMachines, 10000); // Cleanup the interval on component unmount\n\n    return () => clearInterval(intervalId);\n  }, [machines]);\n\n  if (machines.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        sx: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\"\n        },\n        children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 11,\n          sm: 4,\n          md: 2,\n          lg: 2,\n          m: {\n            sm: 2,\n            md: 4,\n            lg: 0\n          },\n          sx: {\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: `machines/:${machine.machineID}`\n            },\n            state: { ...machine\n            },\n            style: {\n              textDecoration: \"none\"\n            },\n            children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n              ID: machine.machineID,\n              monaNumber: machine.monaNumber,\n              moldProtector: machine.moldProtector,\n              status: machine.status,\n              moldMaker: machine.moldMaker,\n              moldMaterial: machine.moldMaterial,\n              moldShots: machine.moldShots,\n              failedShots: machine.failedShots\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(MachineList, \"WDYFkhohIWxSlqBYgmU+OI+Eeys=\");\n\n_c = MachineList;\nexport default MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useState","useEffect","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","machines","setMachines","time","setTime","Date","Material","Protector","Maker","mNumber","sta","stuckCount","notWorkingCount","updateMachines","updatedMachines","map","machine","mold_shots","Math","floor","random","failed_shots","status","length","monaNumber","machineID","moldProtector","moldMaterial","moldMaker","moldShots","failedShots","intervalId","setInterval","clearInterval","display","alignItems","justifyContents","index","sm","md","lg","justifyContent","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\n\nconst MachineList = () => {\n  const [machines, setMachines] = useState([]);\n  const [time, setTime] = useState(new Date());\n\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n  const Protector = [\"Protector1\", \"Protector2\" /*...*/];\n  const Maker = [\"Maker1\", \"Maker2\" /*...*/];\n  const mNumber = [\"M#123\", \"M#124\" /*...*/];\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n\n  let stuckCount = 0;\n  let notWorkingCount = 0;\n\n  useEffect(() => {\n    const updateMachines = () => {\n      const updatedMachines = machines.map((machine) => {\n        let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n        let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n        let status = sta[Math.floor(Math.random() * sta.length)];\n\n        if (status === \"stuck\" && stuckCount >= 2) {\n          status = \"working\";\n        } else if (status === \"stuck\") {\n          stuckCount++;\n        }\n\n        if (status === \"notWorking\" && notWorkingCount >= 3) {\n          status = \"working\";\n        } else if (status === \"notWorking\") {\n          notWorkingCount++;\n        }\n\n        return {\n          ...machine,\n          monaNumber: [mNumber[machine.machineID - 1]],\n          moldProtector: Protector[machine.machineID - 1],\n          status: status,\n          moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n          moldMaker: Maker[machine.machineID - 1],\n          moldShots: mold_shots,\n          failedShots: failed_shots,\n        };\n      });\n\n      setMachines(updatedMachines);\n      setTime(new Date());\n    };\n\n    // Update every 10 seconds (adjust the interval as needed)\n    const intervalId = setInterval(updateMachines, 10000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [machines]);\n\n  if (machines.length > 0) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n          }}\n        >\n          {machines.map((machine, index) => (\n            <Grid\n              item\n              xs={11}\n              sm={4}\n              md={2}\n              lg={2}\n              m={{ sm: 2, md: 4, lg: 0 }}\n              key={index}\n              sx={{\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Link\n                to={{ pathname: `machines/:${machine.machineID}` }}\n                state={{ ...machine }}\n                style={{ textDecoration: \"none\" }}\n              >\n                <MachineGrid\n                  ID={machine.machineID}\n                  monaNumber={machine.monaNumber}\n                  moldProtector={machine.moldProtector}\n                  status={machine.status}\n                  moldMaker={machine.moldMaker}\n                  moldMaterial={machine.moldMaterial}\n                  moldShots={machine.moldShots}\n                  failedShots={machine.failedShots}\n                />\n              </Link>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n\nexport default MachineList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}