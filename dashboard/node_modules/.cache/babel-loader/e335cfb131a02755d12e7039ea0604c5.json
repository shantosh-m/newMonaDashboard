{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\progresslist\\\\index.js\";\n// import React, { useEffect } from \"react\";\nimport React from \"react\"; // import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport Progressbar from \"./utils/Progressbar\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n// import Link from \"@mui/material/Link\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgressList = () => {\n  //const { machineData } = useMachineContext();\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n  for (let i = 0; i < 24; i++) {\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Progress Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4 // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n        ,\n        sx: {\n          // display: \"flex\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\" // backgroundColor: \"rgba(0,0,255)\",\n\n        },\n        children: machines.map((machine, index) => {\n          // if (machine.prodRate!= 0)\n          if (index != 0) {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              sx: {\n                alignItems: \"center\",\n                // Center vertically\n                justifyContent: \"center\" // Center horizontally\n                // marginBottom: 2,\n                // display: \"flex\",\n                // backgroundColor: \"rgba(0,255,255)\",\n\n              },\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: `machines/:${machine.machineID}`\n                },\n                state: { ...machine\n                },\n                style: {\n                  textDecoration: \"none\"\n                },\n                children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n                  ID: machine.machineID,\n                  monaNumber: machine.monaNumber,\n                  moldProtector: machine.moldProtector,\n                  status: machine.status,\n                  moldMaker: machine.moldMaker,\n                  moldMaterial: machine.moldMaterial,\n                  moldShots: machine.moldShots,\n                  failedShots: machine.failedShots\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              } // sx={{ backgroundColor: \"black\" }}\n              ,\n              children: /*#__PURE__*/_jsxDEV(Progressbar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = ProgressList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressList\");","map":{"version":3,"names":["React","Progressbar","TimeGrid","Title","Container","Grid","ProgressList","i","machine","machineID","monaNumber","mNumber","moldProtector","Protector","status","moldMaterial","Material","Math","floor","random","length","moldMaker","Maker","moldShots","mold_shots","failedShots","failed_shots","machines","push","display","alignItems","justifyContents","map","index","sm","md","lg","justifyContent","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/progresslist/index.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\nimport React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport Progressbar from \"./utils/Progressbar\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\n// import Link from \"@mui/material/Link\";\n\nexport const ProgressList = () => {\n  //const { machineData } = useMachineContext();\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  for (let i = 0; i < 24; i++) {\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots,\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Progress Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n          sx={{\n            // display: \"flex\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n            // backgroundColor: \"rgba(0,0,255)\",\n          }}\n        >\n          {machines.map((machine, index) => {\n            // if (machine.prodRate!= 0)\n            if (index != 0) {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\", // Center vertically\n                    justifyContent: \"center\", // Center horizontally\n                    // marginBottom: 2,\n                    // display: \"flex\",\n                    // backgroundColor: \"rgba(0,255,255)\",\n                  }}\n                >\n                  <Link\n                    to={{ pathname: `machines/:${machine.machineID}` }}\n                    state={{ ...machine }}\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <MachineGrid\n                      ID={machine.machineID}\n                      monaNumber={machine.monaNumber}\n                      moldProtector={machine.moldProtector}\n                      status={machine.status}\n                      moldMaker={machine.moldMaker}\n                      moldMaterial={machine.moldMaterial}\n                      moldShots={machine.moldShots}\n                      failedShots={machine.failedShots}\n                    />\n                  </Link>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  // sx={{ backgroundColor: \"black\" }}\n                >\n                  <Progressbar />\n                </Grid>\n              );\n            }\n          })}\n\n          {/* Add the TimeGrid component as the last tab */}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}