{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// MachineContext.js\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nconst MachineContext = /*#__PURE__*/createContext(); // const { io } = require(\"socket.io-client\");\n\nexport const MachineProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [machineData, setMachineData] = useState();\n\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3002/gettingMachineInfo\");\n      setMachineData(response.data);\n      console.log(\"Backend API Response:\", response.data);\n      console.log(\"Backend API Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  }; // const setupSocketListener = () => {\n  //   const socket = io(process.env.REACT_APP_SERVER_BASE_URL, {\n  //     transports: [\"websocket\"],\n  //   });\n  //   socket.on(\"machineDataUpdate\", (data) => {\n  //     // Update the machineData state with real-time data from the socket\n  //     setMachineData(data);\n  //     console.log(\"Socket update:\", data);\n  //   });\n  //   socket.on(\"machines\", (data) => {\n  //     console.log(\"Connected to socket\");\n  //     console.log(\"socket data \", data);\n  //   });\n  //   socket.on(\"disconnect\", () => {\n  //     console.log(\"Disconnected from socket\");\n  //   });\n  // };\n\n\n  useEffect(() => {\n    fetchDataFromBackend();\n    setupSocketListener(); // Cleanup function for socket connection when the component unmounts\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n};\n\n_s(MachineProvider, \"9ukQ3/1AJ2Gl+iZphDP9yxtVErA=\");\n\n_c = MachineProvider;\nexport const useMachineContext = () => {\n  _s2();\n\n  return useContext(MachineContext);\n};\n\n_s2(useMachineContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","MachineContext","MachineProvider","children","machineData","setMachineData","fetchDataFromBackend","response","get","data","console","log","error","setupSocketListener","socket","disconnect","useMachineContext"],"sources":["E:/new Dashboard/dashboard/src/contexts/machinecontext.js"],"sourcesContent":["// MachineContext.js\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst MachineContext = createContext();\n\n// const { io } = require(\"socket.io-client\");\n\nexport const MachineProvider = ({ children }) => {\n  const [machineData, setMachineData] = useState();\n\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\n        \"http://localhost:3002/gettingMachineInfo\"\n      );\n      setMachineData(response.data);\n      console.log(\"Backend API Response:\", response.data);\n      console.log(\"Backend API Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  };\n\n  // const setupSocketListener = () => {\n  //   const socket = io(process.env.REACT_APP_SERVER_BASE_URL, {\n  //     transports: [\"websocket\"],\n  //   });\n  //   socket.on(\"machineDataUpdate\", (data) => {\n  //     // Update the machineData state with real-time data from the socket\n  //     setMachineData(data);\n  //     console.log(\"Socket update:\", data);\n  //   });\n\n  //   socket.on(\"machines\", (data) => {\n  //     console.log(\"Connected to socket\");\n  //     console.log(\"socket data \", data);\n  //   });\n\n  //   socket.on(\"disconnect\", () => {\n  //     console.log(\"Disconnected from socket\");\n  //   });\n  // };\n\n  useEffect(() => {\n    fetchDataFromBackend();\n    setupSocketListener();\n\n    // Cleanup function for socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n};\n\nexport const useMachineContext = () => {\n  return useContext(MachineContext);\n};\n"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,gBAAGL,aAAa,EAApC,C,CAEA;;AAEA,OAAO,MAAMM,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C;;EAEA,MAAMQ,oBAAoB,GAAG,YAAY;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACrB,0CADqB,CAAvB;MAGAH,cAAc,CAACE,QAAQ,CAACE,IAAV,CAAd;MACAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCJ,QAAQ,CAACE,IAA9C;MACAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCJ,QAAQ,CAACE,IAA9C;IACD,CAPD,CAOE,OAAOG,KAAP,EAAc;MACdF,OAAO,CAACE,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;IACD;EACF,CAXD,CAH+C,CAgB/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;;EAEAb,SAAS,CAAC,MAAM;IACdO,oBAAoB;IACpBO,mBAAmB,GAFL,CAId;;IACA,OAAO,MAAM;MACXC,MAAM,CAACC,UAAP;IACD,CAFD;EAGD,CARQ,EAQN,EARM,CAAT;AASD,CA7CM;;GAAMb,e;;KAAAA,e;AA+Cb,OAAO,MAAMc,iBAAiB,GAAG,MAAM;EAAA;;EACrC,OAAOnB,UAAU,CAACI,cAAD,CAAjB;AACD,CAFM;;IAAMe,iB"},"metadata":{},"sourceType":"module"}