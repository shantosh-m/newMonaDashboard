{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\progress\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; // import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport TimeGrid from \"./utils/timegrid\";\nimport { ProgressGrid } from \"./utils/progressgrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Progress = () => {\n  _s();\n\n  // const { machineData } = useMachineContext();\n  const refreshPage = () => {\n    window.location.reload(); // Reloads the entire page\n  }; // Effect to set up the interval for refreshing\n\n\n  useEffect(() => {\n    const intervalId = setInterval(refreshPage, 5000); // Cleanup function to clear the interval when the component is unmounted\n\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  const moldids = [\"asd\", \"adsf\", \"kjkjk\", \"kjkjk\", \"jhjh\"];\n\n  if (moldids) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4 // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n        ,\n        sx: {\n          // display: \"flex\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\" // backgroundColor: \"rgba(0,0,255)\",\n\n        },\n        children: moldids.map((machine, index) => {\n          // if (machine.prodRate!= 0)\n          if (index != 0) {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              sx: {\n                alignItems: \"center\",\n                // Center vertically\n                justifyContent: \"center\" // Center horizontally\n                // marginBottom: 2,\n                // display: \"flex\",\n                // backgroundColor: \"rgba(0,255,255)\",\n\n              },\n              children: /*#__PURE__*/_jsxDEV(ProgressGrid, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 3,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              } // sx={{ backgroundColor: \"black\" }}\n              ,\n              children: /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Progress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Progress;\n\nvar _c;\n\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useEffect","TimeGrid","ProgressGrid","Title","Container","Grid","Progress","refreshPage","window","location","reload","intervalId","setInterval","clearInterval","moldids","display","alignItems","justifyContents","map","machine","index","sm","md","lg","justifyContent"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/progress/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\n// import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { ProgressGrid } from \"./utils/progressgrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\n\nexport const Progress = () => {\n  // const { machineData } = useMachineContext();\n\n  const refreshPage = () => {\n    window.location.reload(); // Reloads the entire page\n  };\n\n  // Effect to set up the interval for refreshing\n  useEffect(() => {\n    const intervalId = setInterval(refreshPage, 5000);\n\n    // Cleanup function to clear the interval when the component is unmounted\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  const moldids = [\"asd\", \"adsf\", \"kjkjk\", \"kjkjk\", \"jhjh\"];\n  if (moldids) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n          sx={{\n            // display: \"flex\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n            // backgroundColor: \"rgba(0,0,255)\",\n          }}\n        >\n          {moldids.map((machine, index) => {\n            // if (machine.prodRate!= 0)\n            if (index != 0) {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\", // Center vertically\n                    justifyContent: \"center\", // Center horizontally\n                    // marginBottom: 2,\n                    // display: \"flex\",\n                    // backgroundColor: \"rgba(0,255,255)\",\n                  }}\n                >\n                  <ProgressGrid />\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={3}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  // sx={{ backgroundColor: \"black\" }}\n                >\n                  <TimeGrid />\n                </Grid>\n              );\n            }\n          })}\n\n          {/* Add the TimeGrid component as the last tab */}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,YAAT,QAA6B,sBAA7B,C,CACA;;AACA,SAASC,KAAT,QAAsB,eAAtB,C,CACA;;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CACA;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC5B;EAEA,MAAMC,WAAW,GAAG,MAAM;IACxBC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GADwB,CACE;EAC3B,CAFD,CAH4B,CAO5B;;;EACAV,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAGC,WAAW,CAACL,WAAD,EAAc,IAAd,CAA9B,CADc,CAGd;;IACA,OAAO,MAAMM,aAAa,CAACF,UAAD,CAA1B;EACD,CALQ,EAKN,EALM,CAAT,CAR4B,CAapB;;EAER,MAAMG,OAAO,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,OAAzB,EAAkC,MAAlC,CAAhB;;EACA,IAAIA,OAAJ,EAAa;IACX,oBACE,QAAC,SAAD;MAAW,QAAQ,EAAE,KAArB;MAAA,wBACE,QAAC,KAAD;QAAO,KAAK,EAAC;MAAb;QAAA;QAAA;QAAA;MAAA,QADF,eAGE,QAAC,IAAD;QACE,SAAS,MADX;QAEE,OAAO,EAAE,CAFX,CAGE;QAHF;QAIE,EAAE,EAAE;UACF;UACAC,OAAO,EAAE,MAFP;UAGFC,UAAU,EAAE,QAHV;UAIFC,eAAe,EAAE,QAJf,CAKF;;QALE,CAJN;QAAA,UAYGH,OAAO,CAACI,GAAR,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;UAC/B;UACA,IAAIA,KAAK,IAAI,CAAb,EAAgB;YACd,oBACE,QAAC,IAAD;cACE,IAAI,MADN;cAEE,EAAE,EAAE,EAFN;cAGE,EAAE,EAAE,CAHN;cAIE,EAAE,EAAE,CAJN;cAKE,EAAE,EAAE,CALN;cAME,CAAC,EAAE;gBAAEC,EAAE,EAAE,CAAN;gBAASC,EAAE,EAAE,CAAb;gBAAgBC,EAAE,EAAE;cAApB,CANL;cAQE,EAAE,EAAE;gBACFP,UAAU,EAAE,QADV;gBACoB;gBACtBQ,cAAc,EAAE,QAFd,CAEwB;gBAC1B;gBACA;gBACA;;cALE,CARN;cAAA,uBAgBE,QAAC,YAAD;gBAAA;gBAAA;gBAAA;cAAA;YAhBF,GAOOJ,KAPP;cAAA;cAAA;cAAA;YAAA,QADF;UAoBD,CArBD,MAqBO;YACL,oBACE,QAAC,IAAD;cACE,IAAI,MADN;cAEE,EAAE,EAAE,EAFN;cAGE,EAAE,EAAE,CAHN;cAIE,EAAE,EAAE,CAJN;cAKE,EAAE,EAAE,CALN;cAME,CAAC,EAAE;gBAAEC,EAAE,EAAE,CAAN;gBAASC,EAAE,EAAE,CAAb;gBAAgBC,EAAE,EAAE;cAApB,CANL,CAOE;cAPF;cAAA,uBASE,QAAC,QAAD;gBAAA;gBAAA;gBAAA;cAAA;YATF;cAAA;cAAA;cAAA;YAAA,QADF;UAaD;QACF,CAtCA;MAZH;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EA4DD,CA7DD,MA6DO;IACL,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;AACF,CAhFM;;GAAMjB,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}