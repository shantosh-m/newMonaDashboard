{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector, gridRowsIdToIdLookupSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      previousTree: null,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {// Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    var _ref;\n\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, _ref2, index) => {\n    let {\n      id\n    } = _ref2;\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback((newCache, throttle) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          previousTree: gridRowTreeSelector(apiRef),\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.unstable_caches.rows = newCache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.unstable_caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange(cache, true);\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\n\n\n    const uniqueUpdates = new Map();\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n\n      if (uniqueUpdates.has(id)) {\n        uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n      } else {\n        uniqueUpdates.set(id, update);\n      }\n    });\n    const deletedRowIds = [];\n    const prevCache = apiRef.current.unstable_caches.rows;\n    const newCache = {\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\n      rowCountPropBeforePartialUpdates: prevCache.rowCountPropBeforePartialUpdates,\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\n      ids: [...prevCache.ids]\n    };\n    uniqueUpdates.forEach((partialRow, id) => {\n      // eslint-disable-next-line no-underscore-dangle\n      if (partialRow._action === 'delete') {\n        delete newCache.idRowsLookup[id];\n        delete newCache.idToIdLookup[id];\n        deletedRowIds.push(id);\n        return;\n      }\n\n      const oldRow = apiRef.current.getRow(id);\n\n      if (!oldRow) {\n        newCache.idRowsLookup[id] = partialRow;\n        newCache.idToIdLookup[id] = id;\n        newCache.ids.push(id);\n        return;\n      }\n\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\n    });\n\n    if (deletedRowIds.length > 0) {\n      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));\n    }\n\n    throttledRowsChange(newCache, true);\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(allRows.map(id => [id, idRowsLookup[id]]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _gridRowTreeSelector$;\n\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref3 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering\n    } = _ref3;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n\n    if (applySorting) {\n      const groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        const node = tree[id];\n\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const oldIndex = allRows.findIndex(row => row === rowId);\n\n    if (oldIndex === -1 || oldIndex === targetIndex) {\n      return;\n    }\n\n    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n    const updatedRows = [...allRows];\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.unstable_caches.rows.ids = updatedRows;\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    if (newRows.length === 0) {\n      return;\n    }\n\n    const allRows = gridRowIdsSelector(apiRef);\n    const updatedRows = [...allRows];\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef);\n    const tree = gridRowTreeSelector(apiRef);\n\n    const updatedIdRowsLookup = _extends({}, idRowsLookup);\n\n    const updatedIdToIdLookup = _extends({}, idToIdLookup);\n\n    const updatedTree = _extends({}, tree);\n\n    const newRowEntries = newRows.map(newRowModel => {\n      const rowId = getRowIdFromRowModel(newRowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      return {\n        id: rowId,\n        model: newRowModel\n      };\n    });\n    newRowEntries.forEach((row, index) => {\n      const [replacedRowId] = updatedRows.splice(firstRowToRender + index, 1, row.id);\n      delete updatedIdRowsLookup[replacedRowId];\n      delete updatedIdToIdLookup[replacedRowId];\n      delete updatedTree[replacedRowId];\n    });\n    newRowEntries.forEach(row => {\n      const rowTreeNodeConfig = {\n        id: row.id,\n        parent: null,\n        depth: 0,\n        groupingKey: null,\n        groupingField: null\n      };\n      updatedIdRowsLookup[row.id] = row.model;\n      updatedIdToIdLookup[row.id] = row.id;\n      updatedTree[row.id] = rowTreeNodeConfig;\n    });\n    apiRef.current.unstable_caches.rows.idRowsLookup = updatedIdRowsLookup;\n    apiRef.current.unstable_caches.rows.idToIdLookup = updatedIdToIdLookup;\n    apiRef.current.unstable_caches.rows.ids = updatedRows;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        idRowsLookup: updatedIdRowsLookup,\n        idToIdLookup: updatedIdToIdLookup,\n        tree: updatedTree,\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    setRowIndex,\n    updateRows,\n    setRowChildrenExpansion,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    getRowGroupChildren,\n    unstable_replaceRows: replaceRows\n  };\n  /**\n   * EVENTS\n   */\n\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = apiRef.current.unstable_caches.rows;\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n\n    throttledRowsChange(cache, false);\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\n   * APPLIERS\n   */\n\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\n    }));\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    const areNewRowsAlreadyInState = apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates === props.rowCount; // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n\n      return;\n    }\n\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows: props.rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    }), false);\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowIdsSelector","gridRowGroupingNameSelector","gridRowsIdToIdLookupSelector","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","unstable_caches","rows","getRowId","loading","rowCount","previousTree","rowCountProp","loadingProp","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","currentPage","lastUpdateMs","useRef","Date","now","timeout","getRow","useCallback","id","_ref","lookup","useMemo","reduce","acc","index","throttledRowsChange","newCache","throttle","run","setState","publishEvent","forceUpdate","clearTimeout","throttleRemainingTimeMs","throttleRowsMs","setTimeout","setRows","debug","length","cache","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","uniqueUpdates","Map","forEach","update","has","set","get","deletedRowIds","loadingPropBeforePartialUpdates","rowCountPropBeforePartialUpdates","idRowsLookup","idToIdLookup","ids","partialRow","_action","push","oldRow","filter","includes","getRowModels","allRows","map","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","getRowNode","newNode","childrenExpanded","tree","_gridRowTreeSelector$","getRowGroupChildren","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","node","isAutoGenerated","filteredRowsLookup","childId","setRowIndex","rowId","targetIndex","oldIndex","row","updatedRows","splice","replaceRows","firstRowToRender","newRows","updatedIdRowsLookup","updatedIdToIdLookup","updatedTree","newRowEntries","newRowModel","model","replacedRowId","rowTreeNodeConfig","parent","groupingKey","groupingField","rowApi","unstable_replaceRows","groupRows","info","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","unstable_getActiveStrategy","applyHydrateRowsProcessor","unstable_applyPipeProcessors","groupingResponseBeforeRowHydration","useEffect","isFirstRender","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","isNewRowCountAlreadyInState","totalRowCount","Math","max","totalTopLevelRowCount"],"sources":["/home_2/university/mona/e17-co328-Analysis-Tool-for-Industrial-Images/web-app/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector, gridRowsIdToIdLookupSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      previousTree: null,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {// Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    var _ref;\n\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback((newCache, throttle) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          previousTree: gridRowTreeSelector(apiRef),\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.unstable_caches.rows = newCache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.unstable_caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange(cache, true);\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\n\n\n    const uniqueUpdates = new Map();\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n\n      if (uniqueUpdates.has(id)) {\n        uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n      } else {\n        uniqueUpdates.set(id, update);\n      }\n    });\n    const deletedRowIds = [];\n    const prevCache = apiRef.current.unstable_caches.rows;\n    const newCache = {\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\n      rowCountPropBeforePartialUpdates: prevCache.rowCountPropBeforePartialUpdates,\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\n      ids: [...prevCache.ids]\n    };\n    uniqueUpdates.forEach((partialRow, id) => {\n      // eslint-disable-next-line no-underscore-dangle\n      if (partialRow._action === 'delete') {\n        delete newCache.idRowsLookup[id];\n        delete newCache.idToIdLookup[id];\n        deletedRowIds.push(id);\n        return;\n      }\n\n      const oldRow = apiRef.current.getRow(id);\n\n      if (!oldRow) {\n        newCache.idRowsLookup[id] = partialRow;\n        newCache.idToIdLookup[id] = id;\n        newCache.ids.push(id);\n        return;\n      }\n\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\n    });\n\n    if (deletedRowIds.length > 0) {\n      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));\n    }\n\n    throttledRowsChange(newCache, true);\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(allRows.map(id => [id, idRowsLookup[id]]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _gridRowTreeSelector$;\n\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n\n    if (applySorting) {\n      const groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        const node = tree[id];\n\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const oldIndex = allRows.findIndex(row => row === rowId);\n\n    if (oldIndex === -1 || oldIndex === targetIndex) {\n      return;\n    }\n\n    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n    const updatedRows = [...allRows];\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.unstable_caches.rows.ids = updatedRows;\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    if (newRows.length === 0) {\n      return;\n    }\n\n    const allRows = gridRowIdsSelector(apiRef);\n    const updatedRows = [...allRows];\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef);\n    const tree = gridRowTreeSelector(apiRef);\n\n    const updatedIdRowsLookup = _extends({}, idRowsLookup);\n\n    const updatedIdToIdLookup = _extends({}, idToIdLookup);\n\n    const updatedTree = _extends({}, tree);\n\n    const newRowEntries = newRows.map(newRowModel => {\n      const rowId = getRowIdFromRowModel(newRowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      return {\n        id: rowId,\n        model: newRowModel\n      };\n    });\n    newRowEntries.forEach((row, index) => {\n      const [replacedRowId] = updatedRows.splice(firstRowToRender + index, 1, row.id);\n      delete updatedIdRowsLookup[replacedRowId];\n      delete updatedIdToIdLookup[replacedRowId];\n      delete updatedTree[replacedRowId];\n    });\n    newRowEntries.forEach(row => {\n      const rowTreeNodeConfig = {\n        id: row.id,\n        parent: null,\n        depth: 0,\n        groupingKey: null,\n        groupingField: null\n      };\n      updatedIdRowsLookup[row.id] = row.model;\n      updatedIdToIdLookup[row.id] = row.id;\n      updatedTree[row.id] = rowTreeNodeConfig;\n    });\n    apiRef.current.unstable_caches.rows.idRowsLookup = updatedIdRowsLookup;\n    apiRef.current.unstable_caches.rows.idToIdLookup = updatedIdToIdLookup;\n    apiRef.current.unstable_caches.rows.ids = updatedRows;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        idRowsLookup: updatedIdRowsLookup,\n        idToIdLookup: updatedIdToIdLookup,\n        tree: updatedTree,\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    setRowIndex,\n    updateRows,\n    setRowChildrenExpansion,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    getRowGroupChildren,\n    unstable_replaceRows: replaceRows\n  };\n  /**\n   * EVENTS\n   */\n\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = apiRef.current.unstable_caches.rows;\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n\n    throttledRowsChange(cache, false);\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\n   * APPLIERS\n   */\n\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\n    }));\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    const areNewRowsAlreadyInState = apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates === props.rowCount; // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n\n      return;\n    }\n\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows: props.rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    }), false);\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}