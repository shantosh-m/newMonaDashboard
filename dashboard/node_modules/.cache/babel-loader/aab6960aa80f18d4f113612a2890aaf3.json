{"ast":null,"code":"var _jsxFileName = \"E:\\\\new Dashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\";\n// import React, { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport axios from \"axios\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3002/gettingMachineInfo\"); // Log the data received from the backend API\n\n      console.log(\"Backend API Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  };\n\n  fetchDataFromBackend(); // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n  // const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  // const Protector = [\n  //   \"Protector1\",\n  //   \"Protector2\",\n  //   \"Protector3\",\n  //   \"Protector4\",\n  //   \"Protector5\",\n  //   \"Protector6\",\n  //   \"Protector7\",\n  //   \"Protector8\",\n  //   \"Protector9\",\n  //   \"Protector10\",\n  //   \"Protector11\",\n  //   \"Protector12\",\n  //   \"Protector13\",\n  //   \"Protector14\",\n  //   \"Protector15\",\n  //   \"Protector16\",\n  //   \"Protector17\",\n  //   \"Protector18\",\n  //   \"Protector19\",\n  //   \"Protector20\",\n  //   \"Protector21\",\n  //   \"Protector22\",\n  //   \"Protector23\",\n  // ];\n  // const Maker = [\n  //   \"Maker1\",\n  //   \"Maker2\",\n  //   \"Maker3\",\n  //   \"Maker4\",\n  //   \"Maker5\",\n  //   \"Maker6\",\n  //   \"Maker7\",\n  //   \"Maker8\",\n  //   \"Maker9\",\n  //   \"Maker10\",\n  //   \"Maker11\",\n  //   \"Maker12\",\n  //   \"Maker13\",\n  //   \"Maker14\",\n  //   \"Maker15\",\n  //   \"Maker16\",\n  //   \"Maker17\",\n  //   \"Maker18\",\n  //   \"Maker19\",\n  //   \"Maker20\",\n  //   \"Maker21\",\n  //   \"Maker22\",\n  //   \"Maker23\",\n  // ];\n  // const mNumber = [\n  //   \"M#123\",\n  //   \"M#124\",\n  //   \"M#125\",\n  //   \"M#126\",\n  //   \"M#127\",\n  //   \"M#128_1\",\n  //   \"M#129\",\n  //   \"M#130\",\n  //   \"M#131_1\",\n  //   \"M#132\",\n  //   \"M#133_2\",\n  //   \"M#134\",\n  //   \"M#135\",\n  //   \"M#133_3\",\n  //   \"M#137\",\n  //   \"M#138\",\n  //   \"M#128_2\",\n  //   \"M#140\",\n  //   \"M#141\",\n  //   \"M#142\",\n  //   \"M#143\",\n  //   \"M#144\",\n  //   \"M#145\",\n  // ];\n  // const sta = [\"working\", \"notWorking\", \"stuck\"];\n  // const [machines, setMachines] = useState([]);\n\n  const machines = [{\n    machineID: 1,\n    monaNumber: [\"M#1\"],\n    moldProtector: \"Protector1\",\n    status: \"stuck\",\n    moldMaterial: \"MAAS\"\n  }, {\n    machineID: 2,\n    monaNumber: [\"M#2\"],\n    moldProtector: \"Protector2\",\n    status: \"stuck\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 3,\n    monaNumber: [\"M#3\"],\n    moldProtector: \"Protector3\",\n    status: \"working\",\n    moldMaterial: \"HIPS\",\n    moldShots: 8,\n    failedShots: 6,\n    intervalId: 6\n  }, {\n    machineID: 4,\n    monaNumber: [\"M#126\"],\n    moldProtector: \"Protector4\",\n    status: \"notWorking\",\n    moldMaterial: \"TPR\",\n    moldMaker: \"Maker4\",\n    moldShots: 8,\n    failedShots: 6,\n    intervalId: 6\n  }, {\n    machineID: 5,\n    monaNumber: [\"M#5\"],\n    moldProtector: \"Protector5\",\n    status: \"working\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 6,\n    monaNumber: [\"M#6\"],\n    moldProtector: \"Protector6\",\n    status: \"working\",\n    moldMaterial: \"TPR\"\n  }, {\n    machineID: 7,\n    monaNumber: [\"M#7\"],\n    moldProtector: \"Protector7\",\n    status: \"working\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 8,\n    monaNumber: [\"M#8\"],\n    moldProtector: \"Protector8\",\n    status: \"working\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 9,\n    monaNumber: [\"M#9\"],\n    moldProtector: \"Protector9\",\n    status: \"working\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 10,\n    monaNumber: [\"M#10\"],\n    moldProtector: \"Protector10\",\n    status: \"working\",\n    moldMaterial: \"HIPS\"\n  }, {\n    machineID: 11,\n    monaNumber: [\"M#11\"],\n    moldProtector: \"Protector11\",\n    status: \"working\",\n    moldMaterial: \"MABS\"\n  }, {\n    machineID: 12,\n    monaNumber: [\"M#12\"],\n    moldProtector: \"Protector12\",\n    status: \"working\",\n    moldMaterial: \"GPPS\"\n  }, {\n    machineID: 13,\n    monaNumber: [\"M#13\"],\n    moldProtector: \"Protector13\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 14,\n    monaNumber: [\"M#14\"],\n    moldProtector: \"Protector14\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 15,\n    monaNumber: [\"M#15\"],\n    moldProtector: \"Protector15\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 16,\n    monaNumber: [\"M#16\"],\n    moldProtector: \"Protector16\",\n    status: \"working\",\n    moldMaterial: \"MABS\"\n  }, {\n    machineID: 17,\n    monaNumber: [\"M#17\"],\n    moldProtector: \"Protector17\",\n    status: \"working\",\n    moldMaterial: \"MABS\"\n  }, {\n    machineID: 18,\n    monaNumber: [\"M#18\"],\n    moldProtector: \"Protector18\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 19,\n    monaNumber: [\"M#19\"],\n    moldProtector: \"Protector19\",\n    status: \"working\",\n    moldMaterial: \"MABS\"\n  }, {\n    machineID: 20,\n    monaNumber: [\"M#20\"],\n    moldProtector: \"Protector20\",\n    status: \"working\",\n    moldMaterial: \"MABS\"\n  }, {\n    machineID: 21,\n    monaNumber: [\"M#21\"],\n    moldProtector: \"Protector21\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 22,\n    monaNumber: [\"M#22\"],\n    moldProtector: \"Protector22\",\n    status: \"working\",\n    moldMaterial: \"ABS\"\n  }, {\n    machineID: 23,\n    monaNumber: [\"M#23\"],\n    moldProtector: \"Protector23\",\n    status: \"working\",\n    moldMaterial: \"HIPS\"\n  }]; // // ... (previous code)\n  // useEffect(() => {\n  //   const generateRandomValue = (max) => Math.floor(Math.random() * (max + 1));\n  //   const generatedMachines = [];\n  //   let stuckCount = 0;\n  //   let notWorkingCount = 0;\n  //   for (let i = 0; i < 24; i++) {\n  //     const mold_shots = generateRandomValue(100);\n  //     const failed_shots = generateRandomValue(10); // Ensure failedShots is initially under 10\n  //     // Choose a random status from the sta array\n  //     let status = sta[Math.floor(Math.random() * sta.length)];\n  //     // Ensure that \"stuck\" is selected fewer than two times\n  //     if (status === \"stuck\" && stuckCount >= 1) {\n  //       status = \"working\";\n  //     } else if (status === \"stuck\") {\n  //       stuckCount++;\n  //     }\n  //     if (status === \"notWorking\" && notWorkingCount >= 2) {\n  //       status = \"working\";\n  //     } else if (status === \"notWorking\") {\n  //       notWorkingCount++;\n  //     }\n  //     const intervalId = setInterval(() => {\n  //       setMachines((prevMachines) => {\n  //         const updatedMachines = [...prevMachines];\n  //         // Find the index of the current machine\n  //         const machineIndex = updatedMachines.findIndex(\n  //           (machine) => machine.machineID === i\n  //         );\n  //         // Check if the machine is not \"stuck\" or \"notWorking\" before updating\n  //         if (\n  //           updatedMachines[machineIndex].status !== \"stuck\" &&\n  //           updatedMachines[machineIndex].status !== \"notWorking\"\n  //         ) {\n  //           // Update moldShots and failedShots for the selected machine\n  //           updatedMachines[machineIndex].moldShots =\n  //             updatedMachines[machineIndex].moldShots + 0.5;\n  //         } else if (updatedMachines[machineIndex].status === \"stuck\") {\n  //           // Increment failedShots only for \"stuck\" machines\n  //           updatedMachines[machineIndex].failedShots =\n  //             updatedMachines[machineIndex].failedShots + 0.5;\n  //         }\n  //         return updatedMachines;\n  //       });\n  //     }, Math.floor(Math.random() * (7000 - 1000 + 1)) + 5000); // Random interval between 1 and 5 seconds\n  //     const machine = {\n  //       machineID: i,\n  //       monaNumber: [mNumber[i - 1]],\n  //       moldProtector: Protector[i - 1],\n  //       status: status,\n  //       moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n  //       moldMaker: Maker[i - 1],\n  //       moldShots: mold_shots,\n  //       failedShots: failed_shots,\n  //       intervalId: intervalId, // Store intervalId in the machine object\n  //     };\n  //     generatedMachines.push(machine);\n  //   }\n  //   setMachines(generatedMachines);\n  //   return () => {\n  //     // Clear intervals when the component unmounts\n  //     generatedMachines.forEach((machine) => {\n  //       clearInterval(machine.intervalId);\n  //     });\n  //   };\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n  // // ... (remaining code)\n  // useEffect(() => {\n  //   // Change the status of additional machines to \"stuck\" after a certain period\n  //   const additionalStuckIntervalId = setInterval(() => {\n  //     setMachines((prevMachines) => {\n  //       const updatedMachines = [...prevMachines];\n  //       // Count the current number of stuck machines\n  //       const currentStuckCount = updatedMachines.filter(\n  //         (machine) => machine.status === \"stuck\"\n  //       ).length;\n  //       // If the total number of stuck machines is less than 3, change the status of additional machines to \"stuck\"\n  //       if (currentStuckCount < 3) {\n  //         // Find the index of the first machine with status other than \"stuck\"\n  //         const firstNonStuckIndex = updatedMachines.findIndex(\n  //           (machine) => machine.status !== \"stuck\"\n  //         );\n  //         // If there is a machine with status other than \"stuck\", update its status to \"stuck\"\n  //         if (firstNonStuckIndex !== -1) {\n  //           updatedMachines[firstNonStuckIndex] = {\n  //             ...updatedMachines[firstNonStuckIndex],\n  //             status: \"stuck\",\n  //           };\n  //         }\n  //       }\n  //       console.log(updatedMachines);\n  //       return updatedMachines;\n  //     });\n  //   }, 8000); // Change the status every 60 seconds (60000 milliseconds)\n  //   // Clear the interval on component unmount\n  //   return () => clearInterval(additionalStuckIntervalId);\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: \"Molding Section Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 11,\n        sm: 4,\n        md: 2,\n        lg: 2,\n        m: {\n          sm: 2,\n          md: 4,\n          lg: 0\n        },\n        sx: {\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: index === 0 ? /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `machines/:${machine.machineID}`\n          },\n          state: { ...machine\n          },\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n            ID: machine.machineID,\n            monaNumber: machine.monaNumber,\n            moldProtector: machine.moldProtector,\n            status: machine.status,\n            moldMaker: machine.moldMaker,\n            moldMaterial: machine.moldMaterial,\n            moldShots: Math.round(machine.moldShots),\n            failedShots: Math.round(machine.failedShots)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n};\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","Container","Grid","Link","axios","MachineGrid","TimeGrid","Title","MachineList","fetchDataFromBackend","response","get","console","log","data","error","machines","machineID","monaNumber","moldProtector","status","moldMaterial","moldShots","failedShots","intervalId","moldMaker","display","alignItems","justifyContent","map","machine","index","sm","md","lg","pathname","textDecoration","Math","round"],"sources":["E:/new Dashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport axios from \"axios\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\nimport { Title } from \"./utils/title\";\n\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n  const fetchDataFromBackend = async () => {\n    try {\n      const response = await axios.get(\n        \"http://localhost:3002/gettingMachineInfo\"\n      );\n      // Log the data received from the backend API\n      console.log(\"Backend API Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n    }\n  };\n\n  fetchDataFromBackend();\n\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  // const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n  // const Protector = [\n  //   \"Protector1\",\n  //   \"Protector2\",\n  //   \"Protector3\",\n  //   \"Protector4\",\n  //   \"Protector5\",\n  //   \"Protector6\",\n  //   \"Protector7\",\n  //   \"Protector8\",\n  //   \"Protector9\",\n  //   \"Protector10\",\n  //   \"Protector11\",\n  //   \"Protector12\",\n  //   \"Protector13\",\n  //   \"Protector14\",\n  //   \"Protector15\",\n  //   \"Protector16\",\n  //   \"Protector17\",\n  //   \"Protector18\",\n  //   \"Protector19\",\n  //   \"Protector20\",\n  //   \"Protector21\",\n  //   \"Protector22\",\n  //   \"Protector23\",\n  // ];\n\n  // const Maker = [\n  //   \"Maker1\",\n  //   \"Maker2\",\n  //   \"Maker3\",\n  //   \"Maker4\",\n  //   \"Maker5\",\n  //   \"Maker6\",\n  //   \"Maker7\",\n  //   \"Maker8\",\n  //   \"Maker9\",\n  //   \"Maker10\",\n  //   \"Maker11\",\n  //   \"Maker12\",\n  //   \"Maker13\",\n  //   \"Maker14\",\n  //   \"Maker15\",\n  //   \"Maker16\",\n  //   \"Maker17\",\n  //   \"Maker18\",\n  //   \"Maker19\",\n  //   \"Maker20\",\n  //   \"Maker21\",\n  //   \"Maker22\",\n  //   \"Maker23\",\n  // ];\n\n  // const mNumber = [\n  //   \"M#123\",\n  //   \"M#124\",\n  //   \"M#125\",\n  //   \"M#126\",\n  //   \"M#127\",\n  //   \"M#128_1\",\n  //   \"M#129\",\n  //   \"M#130\",\n  //   \"M#131_1\",\n  //   \"M#132\",\n  //   \"M#133_2\",\n  //   \"M#134\",\n  //   \"M#135\",\n  //   \"M#133_3\",\n  //   \"M#137\",\n  //   \"M#138\",\n  //   \"M#128_2\",\n  //   \"M#140\",\n  //   \"M#141\",\n  //   \"M#142\",\n  //   \"M#143\",\n  //   \"M#144\",\n  //   \"M#145\",\n  // ];\n\n  // const sta = [\"working\", \"notWorking\", \"stuck\"];\n  // const [machines, setMachines] = useState([]);\n\n  const machines = [\n    {\n      machineID: 1,\n      monaNumber: [\"M#1\"],\n      moldProtector: \"Protector1\",\n      status: \"stuck\",\n      moldMaterial: \"MAAS\",\n    },\n    {\n      machineID: 2,\n      monaNumber: [\"M#2\"],\n      moldProtector: \"Protector2\",\n      status: \"stuck\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 3,\n      monaNumber: [\"M#3\"],\n      moldProtector: \"Protector3\",\n      status: \"working\",\n      moldMaterial: \"HIPS\",\n      moldShots: 8,\n      failedShots: 6,\n      intervalId: 6,\n    },\n    {\n      machineID: 4,\n      monaNumber: [\"M#126\"],\n      moldProtector: \"Protector4\",\n      status: \"notWorking\",\n      moldMaterial: \"TPR\",\n      moldMaker: \"Maker4\",\n      moldShots: 8,\n      failedShots: 6,\n      intervalId: 6,\n    },\n    {\n      machineID: 5,\n      monaNumber: [\"M#5\"],\n      moldProtector: \"Protector5\",\n      status: \"working\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 6,\n      monaNumber: [\"M#6\"],\n      moldProtector: \"Protector6\",\n      status: \"working\",\n      moldMaterial: \"TPR\",\n    },\n    {\n      machineID: 7,\n      monaNumber: [\"M#7\"],\n      moldProtector: \"Protector7\",\n      status: \"working\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 8,\n      monaNumber: [\"M#8\"],\n      moldProtector: \"Protector8\",\n      status: \"working\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 9,\n      monaNumber: [\"M#9\"],\n      moldProtector: \"Protector9\",\n      status: \"working\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 10,\n      monaNumber: [\"M#10\"],\n      moldProtector: \"Protector10\",\n      status: \"working\",\n      moldMaterial: \"HIPS\",\n    },\n    {\n      machineID: 11,\n      monaNumber: [\"M#11\"],\n      moldProtector: \"Protector11\",\n      status: \"working\",\n      moldMaterial: \"MABS\",\n    },\n    {\n      machineID: 12,\n      monaNumber: [\"M#12\"],\n      moldProtector: \"Protector12\",\n      status: \"working\",\n      moldMaterial: \"GPPS\",\n    },\n    {\n      machineID: 13,\n      monaNumber: [\"M#13\"],\n      moldProtector: \"Protector13\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 14,\n      monaNumber: [\"M#14\"],\n      moldProtector: \"Protector14\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 15,\n      monaNumber: [\"M#15\"],\n      moldProtector: \"Protector15\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 16,\n      monaNumber: [\"M#16\"],\n      moldProtector: \"Protector16\",\n      status: \"working\",\n      moldMaterial: \"MABS\",\n    },\n    {\n      machineID: 17,\n      monaNumber: [\"M#17\"],\n      moldProtector: \"Protector17\",\n      status: \"working\",\n      moldMaterial: \"MABS\",\n    },\n    {\n      machineID: 18,\n      monaNumber: [\"M#18\"],\n      moldProtector: \"Protector18\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 19,\n      monaNumber: [\"M#19\"],\n      moldProtector: \"Protector19\",\n      status: \"working\",\n      moldMaterial: \"MABS\",\n    },\n    {\n      machineID: 20,\n      monaNumber: [\"M#20\"],\n      moldProtector: \"Protector20\",\n      status: \"working\",\n      moldMaterial: \"MABS\",\n    },\n    {\n      machineID: 21,\n      monaNumber: [\"M#21\"],\n      moldProtector: \"Protector21\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 22,\n      monaNumber: [\"M#22\"],\n      moldProtector: \"Protector22\",\n      status: \"working\",\n      moldMaterial: \"ABS\",\n    },\n    {\n      machineID: 23,\n      monaNumber: [\"M#23\"],\n      moldProtector: \"Protector23\",\n      status: \"working\",\n      moldMaterial: \"HIPS\",\n    },\n  ];\n\n  // // ... (previous code)\n\n  // useEffect(() => {\n  //   const generateRandomValue = (max) => Math.floor(Math.random() * (max + 1));\n\n  //   const generatedMachines = [];\n  //   let stuckCount = 0;\n  //   let notWorkingCount = 0;\n\n  //   for (let i = 0; i < 24; i++) {\n  //     const mold_shots = generateRandomValue(100);\n  //     const failed_shots = generateRandomValue(10); // Ensure failedShots is initially under 10\n\n  //     // Choose a random status from the sta array\n  //     let status = sta[Math.floor(Math.random() * sta.length)];\n\n  //     // Ensure that \"stuck\" is selected fewer than two times\n  //     if (status === \"stuck\" && stuckCount >= 1) {\n  //       status = \"working\";\n  //     } else if (status === \"stuck\") {\n  //       stuckCount++;\n  //     }\n\n  //     if (status === \"notWorking\" && notWorkingCount >= 2) {\n  //       status = \"working\";\n  //     } else if (status === \"notWorking\") {\n  //       notWorkingCount++;\n  //     }\n\n  //     const intervalId = setInterval(() => {\n  //       setMachines((prevMachines) => {\n  //         const updatedMachines = [...prevMachines];\n\n  //         // Find the index of the current machine\n  //         const machineIndex = updatedMachines.findIndex(\n  //           (machine) => machine.machineID === i\n  //         );\n\n  //         // Check if the machine is not \"stuck\" or \"notWorking\" before updating\n  //         if (\n  //           updatedMachines[machineIndex].status !== \"stuck\" &&\n  //           updatedMachines[machineIndex].status !== \"notWorking\"\n  //         ) {\n  //           // Update moldShots and failedShots for the selected machine\n  //           updatedMachines[machineIndex].moldShots =\n  //             updatedMachines[machineIndex].moldShots + 0.5;\n  //         } else if (updatedMachines[machineIndex].status === \"stuck\") {\n  //           // Increment failedShots only for \"stuck\" machines\n  //           updatedMachines[machineIndex].failedShots =\n  //             updatedMachines[machineIndex].failedShots + 0.5;\n  //         }\n\n  //         return updatedMachines;\n  //       });\n  //     }, Math.floor(Math.random() * (7000 - 1000 + 1)) + 5000); // Random interval between 1 and 5 seconds\n\n  //     const machine = {\n  //       machineID: i,\n  //       monaNumber: [mNumber[i - 1]],\n  //       moldProtector: Protector[i - 1],\n  //       status: status,\n  //       moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n  //       moldMaker: Maker[i - 1],\n  //       moldShots: mold_shots,\n  //       failedShots: failed_shots,\n  //       intervalId: intervalId, // Store intervalId in the machine object\n  //     };\n\n  //     generatedMachines.push(machine);\n  //   }\n\n  //   setMachines(generatedMachines);\n\n  //   return () => {\n  //     // Clear intervals when the component unmounts\n  //     generatedMachines.forEach((machine) => {\n  //       clearInterval(machine.intervalId);\n  //     });\n  //   };\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  // // ... (remaining code)\n\n  // useEffect(() => {\n  //   // Change the status of additional machines to \"stuck\" after a certain period\n  //   const additionalStuckIntervalId = setInterval(() => {\n  //     setMachines((prevMachines) => {\n  //       const updatedMachines = [...prevMachines];\n\n  //       // Count the current number of stuck machines\n  //       const currentStuckCount = updatedMachines.filter(\n  //         (machine) => machine.status === \"stuck\"\n  //       ).length;\n\n  //       // If the total number of stuck machines is less than 3, change the status of additional machines to \"stuck\"\n  //       if (currentStuckCount < 3) {\n  //         // Find the index of the first machine with status other than \"stuck\"\n  //         const firstNonStuckIndex = updatedMachines.findIndex(\n  //           (machine) => machine.status !== \"stuck\"\n  //         );\n\n  //         // If there is a machine with status other than \"stuck\", update its status to \"stuck\"\n  //         if (firstNonStuckIndex !== -1) {\n  //           updatedMachines[firstNonStuckIndex] = {\n  //             ...updatedMachines[firstNonStuckIndex],\n  //             status: \"stuck\",\n  //           };\n  //         }\n  //       }\n\n  //       console.log(updatedMachines);\n\n  //       return updatedMachines;\n  //     });\n  //   }, 8000); // Change the status every 60 seconds (60000 milliseconds)\n\n  //   // Clear the interval on component unmount\n  //   return () => clearInterval(additionalStuckIntervalId);\n  // }, []);\n\n  return (\n    <Container maxWidth={false}>\n      <Title title=\"Molding Section Statistics\" />\n\n      <Grid\n        container\n        spacing={4}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {machines.map((machine, index) => (\n          <Grid\n            item\n            xs={11}\n            sm={4}\n            md={2}\n            lg={2}\n            m={{ sm: 2, md: 4, lg: 0 }}\n            key={index}\n            sx={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {index === 0 ? (\n              <TimeGrid />\n            ) : (\n              <Link\n                to={{ pathname: `machines/:${machine.machineID}` }}\n                state={{ ...machine }}\n                style={{ textDecoration: \"none\" }}\n              >\n                <MachineGrid\n                  ID={machine.machineID}\n                  monaNumber={machine.monaNumber}\n                  moldProtector={machine.moldProtector}\n                  status={machine.status}\n                  moldMaker={machine.moldMaker}\n                  moldMaterial={machine.moldMaterial}\n                  moldShots={Math.round(machine.moldShots)}\n                  failedShots={Math.round(machine.failedShots)}\n                />\n              </Link>\n            )}\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}