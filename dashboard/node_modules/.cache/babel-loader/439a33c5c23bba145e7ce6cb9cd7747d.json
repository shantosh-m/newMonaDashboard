{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\n\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\n\nexports.encodePacket = encodePacket_js_1.default;\n\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\n\nexports.decodePacket = decodePacket_js_1.default;\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    (0, encodePacket_js_1.default)(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\n\nexports.encodePayload = encodePayload;\n\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n\n  return packets;\n};\n\nexports.decodePayload = decodePayload;\nexports.protocol = 4;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodePayload","decodePacket","encodePayload","encodePacket","protocol","encodePacket_js_1","require","default","decodePacket_js_1","SEPARATOR","String","fromCharCode","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","encodedPayload","binaryType","split","decodedPacket","push","type"],"sources":["C:/Users/user/Documents/MyDocu/Monadashboard-final/newMonaDashboard/dashboard/node_modules/engine.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\r\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\r\nexports.encodePacket = encodePacket_js_1.default;\r\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\r\nexports.decodePacket = decodePacket_js_1.default;\r\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\r\nconst encodePayload = (packets, callback) => {\r\n    // some packets may be added to the array while encoding, so the initial length must be saved\r\n    const length = packets.length;\r\n    const encodedPackets = new Array(length);\r\n    let count = 0;\r\n    packets.forEach((packet, i) => {\r\n        // force base64 encoding for binary packets\r\n        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {\r\n            encodedPackets[i] = encodedPacket;\r\n            if (++count === length) {\r\n                callback(encodedPackets.join(SEPARATOR));\r\n            }\r\n        });\r\n    });\r\n};\r\nexports.encodePayload = encodePayload;\r\nconst decodePayload = (encodedPayload, binaryType) => {\r\n    const encodedPackets = encodedPayload.split(SEPARATOR);\r\n    const packets = [];\r\n    for (let i = 0; i < encodedPackets.length; i++) {\r\n        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\r\n        packets.push(decodedPacket);\r\n        if (decodedPacket.type === \"error\") {\r\n            break;\r\n        }\r\n    }\r\n    return packets;\r\n};\r\nexports.decodePayload = decodePayload;\r\nexports.protocol = 4;\r\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,aAAR,GAAwBJ,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACM,QAAR,GAAmB,KAAK,CAAtH;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;;AACAR,OAAO,CAACK,YAAR,GAAuBE,iBAAiB,CAACE,OAAzC;;AACA,MAAMC,iBAAiB,GAAGF,OAAO,CAAC,mBAAD,CAAjC;;AACAR,OAAO,CAACG,YAAR,GAAuBO,iBAAiB,CAACD,OAAzC;AACA,MAAME,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAAlB,C,CAA2C;;AAC3C,MAAMT,aAAa,GAAG,CAACU,OAAD,EAAUC,QAAV,KAAuB;EACzC;EACA,MAAMC,MAAM,GAAGF,OAAO,CAACE,MAAvB;EACA,MAAMC,cAAc,GAAG,IAAIC,KAAJ,CAAUF,MAAV,CAAvB;EACA,IAAIG,KAAK,GAAG,CAAZ;EACAL,OAAO,CAACM,OAAR,CAAgB,CAACC,MAAD,EAASC,CAAT,KAAe;IAC3B;IACA,CAAC,GAAGf,iBAAiB,CAACE,OAAtB,EAA+BY,MAA/B,EAAuC,KAAvC,EAA8CE,aAAa,IAAI;MAC3DN,cAAc,CAACK,CAAD,CAAd,GAAoBC,aAApB;;MACA,IAAI,EAAEJ,KAAF,KAAYH,MAAhB,EAAwB;QACpBD,QAAQ,CAACE,cAAc,CAACO,IAAf,CAAoBb,SAApB,CAAD,CAAR;MACH;IACJ,CALD;EAMH,CARD;AASH,CAdD;;AAeAX,OAAO,CAACI,aAAR,GAAwBA,aAAxB;;AACA,MAAMF,aAAa,GAAG,CAACuB,cAAD,EAAiBC,UAAjB,KAAgC;EAClD,MAAMT,cAAc,GAAGQ,cAAc,CAACE,KAAf,CAAqBhB,SAArB,CAAvB;EACA,MAAMG,OAAO,GAAG,EAAhB;;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACD,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;IAC5C,MAAMM,aAAa,GAAG,CAAC,GAAGlB,iBAAiB,CAACD,OAAtB,EAA+BQ,cAAc,CAACK,CAAD,CAA7C,EAAkDI,UAAlD,CAAtB;IACAZ,OAAO,CAACe,IAAR,CAAaD,aAAb;;IACA,IAAIA,aAAa,CAACE,IAAd,KAAuB,OAA3B,EAAoC;MAChC;IACH;EACJ;;EACD,OAAOhB,OAAP;AACH,CAXD;;AAYAd,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACM,QAAR,GAAmB,CAAnB"},"metadata":{},"sourceType":"script"}