{"ast":null,"code":"var _jsxFileName = \"/home_2/university/mona/e17-co328-Analysis-Tool-for-Industrial-Images/web-app/src/components/machineinfoTable.js\",\n    _s = $RefreshSig$();\n\n// import * as React from \"react\";\n// import PropTypes from \"prop-types\";\n// import { alpha } from \"@mui/material/styles\";\n// import Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\n// import TableRow from \"@mui/material/TableRow\";\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import Typography from \"@mui/material/Typography\";\n// import Paper from \"@mui/material/Paper\";\n// import Checkbox from \"@mui/material/Checkbox\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Tooltip from \"@mui/material/Tooltip\";\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import FilterListIcon from \"@mui/icons-material/FilterList\";\n// import { visuallyHidden } from \"@mui/utils\";\n// // function createData(name, calories, fat, carbs, protein) {\n// //   return {\n// //     name,\n// //     calories,\n// //     fat,\n// //     carbs,\n// //     protein,\n// //   };\n// // }\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function getComparator(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// const headCells = [\n//   {\n//     id: \"monanumber\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mona Number\",\n//   },\n//   {\n//     id: \"moldseries\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Serial\",\n//   },\n//   {\n//     id: \"moldmaker\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Maker\",\n//   },\n//   {\n//     id: \"moldmaterial\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Material\",\n//   },\n//   {\n//     id: \"hourrate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Hour Rate\",\n//   },\n//   {\n//     id: \"moldshots\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Shots\",\n//   },\n//   {\n//     id: \"failedshots\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Failed Shots\",\n//   },\n//   {\n//     id: \"startdate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Start Date\",\n//   },\n//   {\n//     id: \"enddate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"End Date\",\n//   },\n// ];\n// function EnhancedTableHead(props) {\n//   const {\n//     onSelectAllClick,\n//     order,\n//     orderBy,\n//     numSelected,\n//     rowCount,\n//     onRequestSort,\n//   } = props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               \"aria-label\": \"select all desserts\",\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? \"right\" : \"left\"}\n//             padding={headCell.disablePadding ? \"none\" : \"normal\"}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : \"asc\"}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// function EnhancedTableToolbar(props) {\n//   const { numSelected } = props;\n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(\n//               theme.palette.primary.main,\n//               theme.palette.action.activatedOpacity\n//             ),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: \"1 1 100%\" }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           sx={{ flex: \"1 1 100%\" }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//           Machine {props.machineId}\n//         </Typography>\n//       )}\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <FilterListIcon />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//     </Toolbar>\n//   );\n// }\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   machineId: PropTypes.number.isRequired,\n// };\n// var machineNewData = [];\n// var moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\n// var moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\n// for (let index = 0; index < 60; index++) {\n//   machineNewData.push({ machineID: (index % 60).toString(), rows: [] });\n// }\n// const page = 2;\n// for (let index = 0; index < 60; index++) {\n//   machineNewData.forEach((value) => {\n//     if (value.machineID == page.toString()) {\n//       value.rows.push({\n//         monaNumber: \"#132\" + index.toString(),\n//         moldSerial: \"QXO43\" + index.toString(),\n//         moldShots: 12 + index,\n//         failedShots: 2 + (index % 5),\n//         prodRate: 12 + index,\n//         material: moldMat[index % 4],\n//         moldMaker: moldMake[index % 4],\n//         startDate: \"05/06/2017\",\n//         endDate: \"09/06/2017\",\n//       });\n//     }\n//   });\n// }\n// console.log(machineNewData);\n// export function MachineInfoTable(props) {\n//   // const {\n//   //   machineId,\n//   //   monaNumber,\n//   //   moldSerial,\n//   //   moldMaker,\n//   //   material,\n//   //   status,\n//   //   moldShots,\n//   //   failedShots,\n//   //   prodRate,\n//   //   prod_startDate,\n//   //   prod_startTime,\n//   //   prod_endDate,\n//   //   prod_endTime,\n//   //   ...others\n//   // } = props;\n//   console.log(props);\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"calories\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(8);\n//   const rows = machineNewData[2].rows;\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === \"asc\";\n//     setOrder(isAsc ? \"desc\" : \"asc\");\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelected = rows.map((n) => n.name);\n//       setSelected(newSelected);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const handleChangeDense = (event) => {\n//     setDense(event.target.checked);\n//   };\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   console.log(rows.length);\n//   return (\n//     <Box sx={{ width: \"100%\", marginLeft: \"20px\", marginRight: \"20px\" }}>\n//       <Paper sx={{ width: \"100%\", mb: 2 }}>\n//         <EnhancedTableToolbar\n//           numSelected={selected.length}\n//           machineId={props.machineId}\n//         />\n//         <TableContainer>\n//           <Table\n//             sx={{ minWidth: 750 }}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? \"small\" : \"medium\"}\n//           >\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n//                  rows.sort(getComparator(order, orderBy)).slice() */}\n//               {stableSort(rows, getComparator(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={(event) => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.name}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           color=\"primary\"\n//                           checked={isItemSelected}\n//                           inputProps={{\n//                             \"aria-labelledby\": labelId,\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell\n//                         component=\"th\"\n//                         id={labelId}\n//                         scope=\"row\"\n//                         padding=\"none\"\n//                       >\n//                         {row.monaNumber}\n//                       </TableCell>\n//                       <TableCell align=\"left\">{row.moldSerial}</TableCell>\n//                       <TableCell align=\"left\">{row.moldMaker}</TableCell>\n//                       <TableCell align=\"left\">{row.material}</TableCell>\n//                       <TableCell align=\"left\">{row.prodRate}</TableCell>\n//                       <TableCell align=\"left\">{row.moldShots}</TableCell>\n//                       <TableCell align=\"left\">{row.failedShots}</TableCell>\n//                       <TableCell align=\"left\">{row.startDate}</TableCell>\n//                       <TableCell align=\"left\">{row.endDate}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[8, 12, 16, 20, 24, 28, 32]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//       <FormControlLabel\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\n//         label=\"Dense padding\"\n//       />\n//     </Box>\n//   );\n// }\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { alpha } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\"; // import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n\nimport TableCell from \"@mui/material/TableCell\"; // import TableContainer from \"@mui/material/TableContainer\";\n\nimport TableHead from \"@mui/material/TableHead\"; // import TablePagination from \"@mui/material/TablePagination\";\n\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Paper from \"@mui/material/Paper\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\"; // import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\n\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FilterListIcon from \"@mui/icons-material/FilterList\";\nimport { visuallyHidden } from \"@mui/utils\";\nimport { DataGrid } from \"@mui/x-data-grid\"; // function createData(name, calories, fat, carbs, protein) {\n//   return {\n//     name,\n//     calories,\n//     fat,\n//     carbs,\n//     protein,\n//   };\n// }\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function getComparator(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EnhancedTableHead(props) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort\n  } = props;\n\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  const headCells = null;\n  return /*#__PURE__*/_jsxDEV(TableHead, {\n    children: /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        padding: \"checkbox\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"primary\",\n          indeterminate: numSelected > 0 && numSelected < rowCount,\n          checked: rowCount > 0 && numSelected === rowCount,\n          onChange: onSelectAllClick,\n          inputProps: {\n            \"aria-label\": \"select all desserts\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), headCells.map(headCell => /*#__PURE__*/_jsxDEV(TableCell, {\n        align: headCell.numeric ? \"right\" : \"left\",\n        padding: headCell.disablePadding ? \"none\" : \"normal\",\n        sortDirection: orderBy === headCell.id ? order : false,\n        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n          active: orderBy === headCell.id,\n          direction: orderBy === headCell.id ? order : \"asc\",\n          onClick: createSortHandler(headCell.id),\n          children: [headCell.label, orderBy === headCell.id ? /*#__PURE__*/_jsxDEV(Box, {\n            component: \"span\",\n            sx: visuallyHidden,\n            children: order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this)\n      }, headCell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 5\n  }, this);\n}\n\n_c = EnhancedTableHead;\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\n\nfunction EnhancedTableToolbar(props) {\n  const {\n    numSelected\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Toolbar, {\n    sx: {\n      pl: {\n        sm: 2\n      },\n      pr: {\n        xs: 1,\n        sm: 1\n      },\n      ...(numSelected > 0 && {\n        bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n      })\n    },\n    children: [numSelected > 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        flex: \"1 1 100%\"\n      },\n      color: \"inherit\",\n      variant: \"subtitle1\",\n      component: \"div\",\n      children: [numSelected, \" selected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        flex: \"1 1 100%\"\n      },\n      variant: \"h6\",\n      id: \"tableTitle\",\n      component: \"div\",\n      children: [\"Machine \", props.machineId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }, this), numSelected > 0 ? /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Delete\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Filter list\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(FilterListIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 579,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = EnhancedTableToolbar;\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  machineId: PropTypes.number.isRequired\n};\nvar machineNewData = [];\nvar moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\nvar moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\n\nfor (let index = 0; index < 60; index++) {\n  machineNewData.push({\n    machineID: (index % 60).toString(),\n    rows: []\n  });\n}\n\nconst page = 2;\n\nfor (let index = 0; index < 60; index++) {\n  machineNewData.forEach(value => {\n    if (value.machineID == page.toString()) {\n      value.rows.push({\n        _id: index,\n        monaNumber: \"#132\" + index.toString(),\n        moldSerial: \"QXO43\" + index.toString(),\n        moldShots: 12 + index,\n        failedShots: 2 + index % 5,\n        prodRate: 12 + index,\n        material: moldMat[index % 4],\n        moldMaker: moldMake[index % 4],\n        startDate: \"05/06/2017\",\n        endDate: \"09/06/2017\"\n      });\n    }\n  });\n} // console.log(machineNewData);\n\n\nexport function MachineInfoTable(props) {\n  _s();\n\n  const columns = useMemo(() => [{\n    field: \"monaNumber\",\n    flex: 15,\n    headerName: \"Mona Number\"\n  }, {\n    field: \"moldSerial\",\n    flex: 15,\n    headerName: \"Mold Serial\"\n  }, {\n    field: \"moldMaker\",\n    flex: 15,\n    headerName: \"Mold Maker\"\n  }, {\n    field: \"material\",\n    flex: 15,\n    headerName: \"Mold Material\"\n  }, {\n    field: \"prodRate\",\n    flex: 12,\n    headerName: \"Hour Rate\"\n  }, {\n    field: \"moldShots\",\n    flex: 12,\n    headerName: \"Mold Shots\"\n  }, {\n    field: \"startDate\",\n    flex: 12,\n    headerName: \"Start Date\"\n  }, {\n    field: \"endDate\",\n    flex: 12,\n    headerName: \"End Date\"\n  }, {\n    field: \"id\",\n    flex: 12,\n    headerName: \"ID\"\n  }], []); // const {\n  //   machineId,\n  //   monaNumber,\n  //   moldSerial,\n  //   moldMaker,\n  //   material,\n  //   status,\n  //   moldShots,\n  //   failedShots,\n  //   prodRate,\n  //   prod_startDate,\n  //   prod_startTime,\n  //   prod_endDate,\n  //   prod_endTime,\n  //   ...others\n  // } = props;\n  // console.log(props);\n  // const [order, setOrder] = React.useState(\"asc\");\n  // const [orderBy, setOrderBy] = React.useState(\"calories\");\n  // const [selected, setSelected] = React.useState([]);\n  // const [page, setPage] = React.useState(0);\n  // const [dense, setDense] = React.useState(false);\n  // const [rowsPerPage, setRowsPerPage] = React.useState(8);\n\n  var machineNewData = [];\n  var moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\n  var moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\n\n  for (let index = 0; index < 60; index++) {\n    machineNewData.push({\n      machineID: (index % 60).toString(),\n      rows: []\n    });\n  }\n\n  for (let index = 0; index < 60; index++) {\n    machineNewData.forEach(value => {\n      if (value.machineID == page.toString()) {\n        value.rows.push({\n          monaNumber: \"#132\" + index.toString(),\n          moldSerial: \"QXO43\" + index.toString(),\n          moldShots: 12 + index,\n          failedShots: 2 + index % 5,\n          prodRate: 12 + index,\n          material: moldMat[index % 4],\n          moldMaker: moldMake[index % 4],\n          startDate: \"05/06/2017\",\n          endDate: \"09/06/2017\",\n          id: index\n        });\n      }\n    });\n  }\n\n  const rows = machineNewData[2].rows; // const handlmachineNewDataeRequestSort = (event, property) => {\n  //   const isAsc = orderBy === property && order === \"asc\";\n  //   setOrder(isAsc ? \"desc\" : \"asc\");\n  //   setOrderBy(property);\n  // };\n  // const handleSelectAllClick = (event) => {\n  //   if (event.target.checked) {\n  //     const newSelected = rows.map((n) => n.name);\n  //     setSelected(newSelected);\n  //     return;\n  //   }\n  //   setSelected([]);\n  // };\n  // const handleClick = (event, name) => {\n  //   const selectedIndex = selected.indexOf(name);\n  //   let newSelected = [];\n  //   if (selectedIndex === -1) {\n  //     newSelected = newSelected.concat(selected, name);\n  //   } else if (selectedIndex === 0) {\n  //     newSelected = newSelected.concat(selected.slice(1));\n  //   } else if (selectedIndex === selected.length - 1) {\n  //     newSelected = newSelected.concat(selected.slice(0, -1));\n  //   } else if (selectedIndex > 0) {\n  //     newSelected = newSelected.concat(\n  //       selected.slice(0, selectedIndex),\n  //       selected.slice(selectedIndex + 1)\n  //     );\n  //   }\n  //   setSelected(newSelected);\n  // };\n  // const handleChangePage = (event, newPage) => {\n  //   setPage(newPage);\n  // };\n  // const handleChangeRowsPerPage = (event) => {\n  //   setRowsPerPage(parseInt(event.target.value, 10));\n  //   setPage(0);\n  // };\n  // const handleChangeDense = (event) => {\n  //   setDense(event.target.checked);\n  // };\n  // const isSelected = (name) => selected.indexOf(name) !== -1;\n  // // Avoid a layout jump when reaching the last page with empty rows.\n  // const emptyRows =\n  //   page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n  // console.log(rows.length);\n  // console.log(rows);\n  // console.log(\"rows\");\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: 1,\n      height: \"100%\",\n      marginLeft: \"100px\",\n      marginRight: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      autoHeight: true,\n      columns: columns,\n      rows: rows,\n      pageSize: 10,\n      rowsPerPageOptions: [12],\n      sx: {\n        boxShadow: 2,\n        border: 2,\n        borderColor: \"primary.light\",\n        \"& .MuiDataGrid-cell:hover\": {\n          color: \"primary.main\"\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 7\n    }, this), console.log(columns), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        width: \"100%\",\n        mb: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 827,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MachineInfoTable, \"erkfbBpUuAY09jdvhSOqc0XsEHQ=\");\n\n_c3 = MachineInfoTable;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EnhancedTableHead\");\n$RefreshReg$(_c2, \"EnhancedTableToolbar\");\n$RefreshReg$(_c3, \"MachineInfoTable\");","map":{"version":3,"names":["React","useMemo","PropTypes","alpha","Box","TableCell","TableHead","TableRow","TableSortLabel","Toolbar","Typography","Paper","Checkbox","IconButton","Tooltip","DeleteIcon","FilterListIcon","visuallyHidden","DataGrid","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","createSortHandler","property","event","headCells","map","headCell","numeric","disablePadding","id","label","propTypes","number","isRequired","func","oneOf","string","EnhancedTableToolbar","pl","sm","pr","xs","bgcolor","theme","palette","primary","main","action","activatedOpacity","flex","machineId","machineNewData","moldMake","moldMat","index","push","machineID","toString","rows","page","forEach","value","_id","monaNumber","moldSerial","moldShots","failedShots","prodRate","material","moldMaker","startDate","endDate","MachineInfoTable","columns","field","headerName","width","height","marginLeft","marginRight","boxShadow","border","borderColor","color","console","log","mb"],"sources":["/home_2/university/mona/e17-co328-Analysis-Tool-for-Industrial-Images/web-app/src/components/machineinfoTable.js"],"sourcesContent":["// import * as React from \"react\";\n// import PropTypes from \"prop-types\";\n// import { alpha } from \"@mui/material/styles\";\n// import Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\n// import TableRow from \"@mui/material/TableRow\";\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import Typography from \"@mui/material/Typography\";\n// import Paper from \"@mui/material/Paper\";\n// import Checkbox from \"@mui/material/Checkbox\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Tooltip from \"@mui/material/Tooltip\";\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import FilterListIcon from \"@mui/icons-material/FilterList\";\n// import { visuallyHidden } from \"@mui/utils\";\n\n// // function createData(name, calories, fat, carbs, protein) {\n// //   return {\n// //     name,\n// //     calories,\n// //     fat,\n// //     carbs,\n// //     protein,\n// //   };\n// // }\n\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function getComparator(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\n// const headCells = [\n//   {\n//     id: \"monanumber\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mona Number\",\n//   },\n//   {\n//     id: \"moldseries\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Serial\",\n//   },\n//   {\n//     id: \"moldmaker\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Maker\",\n//   },\n//   {\n//     id: \"moldmaterial\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Material\",\n//   },\n//   {\n//     id: \"hourrate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Hour Rate\",\n//   },\n//   {\n//     id: \"moldshots\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Mold Shots\",\n//   },\n//   {\n//     id: \"failedshots\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Failed Shots\",\n//   },\n//   {\n//     id: \"startdate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Start Date\",\n//   },\n//   {\n//     id: \"enddate\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"End Date\",\n//   },\n// ];\n\n// function EnhancedTableHead(props) {\n//   const {\n//     onSelectAllClick,\n//     order,\n//     orderBy,\n//     numSelected,\n//     rowCount,\n//     onRequestSort,\n//   } = props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               \"aria-label\": \"select all desserts\",\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? \"right\" : \"left\"}\n//             padding={headCell.disablePadding ? \"none\" : \"normal\"}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : \"asc\"}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// function EnhancedTableToolbar(props) {\n//   const { numSelected } = props;\n\n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(\n//               theme.palette.primary.main,\n//               theme.palette.action.activatedOpacity\n//             ),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: \"1 1 100%\" }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           sx={{ flex: \"1 1 100%\" }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//           Machine {props.machineId}\n//         </Typography>\n//       )}\n\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <FilterListIcon />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//     </Toolbar>\n//   );\n// }\n\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   machineId: PropTypes.number.isRequired,\n// };\n\n// var machineNewData = [];\n// var moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\n// var moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\n// for (let index = 0; index < 60; index++) {\n//   machineNewData.push({ machineID: (index % 60).toString(), rows: [] });\n// }\n// const page = 2;\n// for (let index = 0; index < 60; index++) {\n//   machineNewData.forEach((value) => {\n//     if (value.machineID == page.toString()) {\n//       value.rows.push({\n//         monaNumber: \"#132\" + index.toString(),\n//         moldSerial: \"QXO43\" + index.toString(),\n//         moldShots: 12 + index,\n//         failedShots: 2 + (index % 5),\n//         prodRate: 12 + index,\n//         material: moldMat[index % 4],\n//         moldMaker: moldMake[index % 4],\n//         startDate: \"05/06/2017\",\n//         endDate: \"09/06/2017\",\n//       });\n//     }\n//   });\n// }\n// console.log(machineNewData);\n// export function MachineInfoTable(props) {\n//   // const {\n//   //   machineId,\n//   //   monaNumber,\n//   //   moldSerial,\n//   //   moldMaker,\n//   //   material,\n//   //   status,\n//   //   moldShots,\n//   //   failedShots,\n//   //   prodRate,\n//   //   prod_startDate,\n//   //   prod_startTime,\n//   //   prod_endDate,\n//   //   prod_endTime,\n//   //   ...others\n//   // } = props;\n//   console.log(props);\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"calories\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(8);\n\n//   const rows = machineNewData[2].rows;\n\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === \"asc\";\n//     setOrder(isAsc ? \"desc\" : \"asc\");\n//     setOrderBy(property);\n//   };\n\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelected = rows.map((n) => n.name);\n//       setSelected(newSelected);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n//   const handleChangeDense = (event) => {\n//     setDense(event.target.checked);\n//   };\n\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   console.log(rows.length);\n//   return (\n//     <Box sx={{ width: \"100%\", marginLeft: \"20px\", marginRight: \"20px\" }}>\n//       <Paper sx={{ width: \"100%\", mb: 2 }}>\n//         <EnhancedTableToolbar\n//           numSelected={selected.length}\n//           machineId={props.machineId}\n//         />\n//         <TableContainer>\n//           <Table\n//             sx={{ minWidth: 750 }}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? \"small\" : \"medium\"}\n//           >\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n//                  rows.sort(getComparator(order, orderBy)).slice() */}\n//               {stableSort(rows, getComparator(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={(event) => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.name}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           color=\"primary\"\n//                           checked={isItemSelected}\n//                           inputProps={{\n//                             \"aria-labelledby\": labelId,\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell\n//                         component=\"th\"\n//                         id={labelId}\n//                         scope=\"row\"\n//                         padding=\"none\"\n//                       >\n//                         {row.monaNumber}\n//                       </TableCell>\n//                       <TableCell align=\"left\">{row.moldSerial}</TableCell>\n//                       <TableCell align=\"left\">{row.moldMaker}</TableCell>\n//                       <TableCell align=\"left\">{row.material}</TableCell>\n//                       <TableCell align=\"left\">{row.prodRate}</TableCell>\n//                       <TableCell align=\"left\">{row.moldShots}</TableCell>\n//                       <TableCell align=\"left\">{row.failedShots}</TableCell>\n//                       <TableCell align=\"left\">{row.startDate}</TableCell>\n//                       <TableCell align=\"left\">{row.endDate}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[8, 12, 16, 20, 24, 28, 32]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//       <FormControlLabel\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\n//         label=\"Dense padding\"\n//       />\n//     </Box>\n//   );\n// }\n\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { alpha } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Paper from \"@mui/material/Paper\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FilterListIcon from \"@mui/icons-material/FilterList\";\nimport { visuallyHidden } from \"@mui/utils\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n// function createData(name, calories, fat, carbs, protein) {\n//   return {\n//     name,\n//     calories,\n//     fat,\n//     carbs,\n//     protein,\n//   };\n// }\n\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function getComparator(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\nfunction EnhancedTableHead(props) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const headCells = null;\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              \"aria-label\": \"select all desserts\",\n            }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"normal\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nfunction EnhancedTableToolbar(props) {\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(\n              theme.palette.primary.main,\n              theme.palette.action.activatedOpacity\n            ),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: \"1 1 100%\" }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: \"1 1 100%\" }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Machine {props.machineId}\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  machineId: PropTypes.number.isRequired,\n};\n\nvar machineNewData = [];\nvar moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\nvar moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\nfor (let index = 0; index < 60; index++) {\n  machineNewData.push({ machineID: (index % 60).toString(), rows: [] });\n}\nconst page = 2;\nfor (let index = 0; index < 60; index++) {\n  machineNewData.forEach((value) => {\n    if (value.machineID == page.toString()) {\n      value.rows.push({\n        _id: index,\n        monaNumber: \"#132\" + index.toString(),\n        moldSerial: \"QXO43\" + index.toString(),\n        moldShots: 12 + index,\n        failedShots: 2 + (index % 5),\n        prodRate: 12 + index,\n        material: moldMat[index % 4],\n        moldMaker: moldMake[index % 4],\n        startDate: \"05/06/2017\",\n        endDate: \"09/06/2017\",\n      });\n    }\n  });\n}\n// console.log(machineNewData);\nexport function MachineInfoTable(props) {\n  const columns = useMemo(\n    () => [\n      {\n        field: \"monaNumber\",\n        flex: 15,\n        headerName: \"Mona Number\",\n      },\n      {\n        field: \"moldSerial\",\n        flex: 15,\n        headerName: \"Mold Serial\",\n      },\n      {\n        field: \"moldMaker\",\n        flex: 15,\n        headerName: \"Mold Maker\",\n      },\n      {\n        field: \"material\",\n        flex: 15,\n\n        headerName: \"Mold Material\",\n      },\n      {\n        field: \"prodRate\",\n        flex: 12,\n\n        headerName: \"Hour Rate\",\n      },\n      {\n        field: \"moldShots\",\n        flex: 12,\n\n        headerName: \"Mold Shots\",\n      },\n      {\n        field: \"startDate\",\n        flex: 12,\n\n        headerName: \"Start Date\",\n      },\n      {\n        field: \"endDate\",\n        flex: 12,\n\n        headerName: \"End Date\",\n      },\n      {\n        field: \"id\",\n        flex: 12,\n\n        headerName: \"ID\",\n      },\n    ],\n    []\n  );\n  // const {\n  //   machineId,\n  //   monaNumber,\n  //   moldSerial,\n  //   moldMaker,\n  //   material,\n  //   status,\n  //   moldShots,\n  //   failedShots,\n  //   prodRate,\n  //   prod_startDate,\n  //   prod_startTime,\n  //   prod_endDate,\n  //   prod_endTime,\n  //   ...others\n  // } = props;\n  // console.log(props);\n  // const [order, setOrder] = React.useState(\"asc\");\n  // const [orderBy, setOrderBy] = React.useState(\"calories\");\n  // const [selected, setSelected] = React.useState([]);\n  // const [page, setPage] = React.useState(0);\n  // const [dense, setDense] = React.useState(false);\n  // const [rowsPerPage, setRowsPerPage] = React.useState(8);\n\n  var machineNewData = [];\n  var moldMake = [\"ALEX\", \"TET\", \"TONY\", \"MONA\"];\n  var moldMat = [\"HIPS\", \"ABS\", \"ABS-CLEAR\", \"SAN\"];\n  \n  for (let index = 0; index < 60; index++) {\n    machineNewData.push({ machineID: (index % 60).toString(), rows: [] });\n  }\n\n  for (let index = 0; index < 60; index++) {\n    machineNewData.forEach((value) => {\n      if (value.machineID == page.toString()) {\n        value.rows.push({\n          monaNumber: \"#132\" + index.toString(),\n          moldSerial: \"QXO43\" + index.toString(),\n          moldShots: 12 + index,\n          failedShots: 2 + (index % 5),\n          prodRate: 12 + index,\n          material: moldMat[index % 4],\n          moldMaker: moldMake[index % 4],\n          startDate: \"05/06/2017\",\n          endDate: \"09/06/2017\",\n          id: index,\n        });\n      }\n    });\n  }\n  const rows = machineNewData[2].rows;\n\n  // const handlmachineNewDataeRequestSort = (event, property) => {\n  //   const isAsc = orderBy === property && order === \"asc\";\n  //   setOrder(isAsc ? \"desc\" : \"asc\");\n  //   setOrderBy(property);\n  // };\n\n  // const handleSelectAllClick = (event) => {\n  //   if (event.target.checked) {\n  //     const newSelected = rows.map((n) => n.name);\n  //     setSelected(newSelected);\n  //     return;\n  //   }\n  //   setSelected([]);\n  // };\n\n  // const handleClick = (event, name) => {\n  //   const selectedIndex = selected.indexOf(name);\n  //   let newSelected = [];\n\n  //   if (selectedIndex === -1) {\n  //     newSelected = newSelected.concat(selected, name);\n  //   } else if (selectedIndex === 0) {\n  //     newSelected = newSelected.concat(selected.slice(1));\n  //   } else if (selectedIndex === selected.length - 1) {\n  //     newSelected = newSelected.concat(selected.slice(0, -1));\n  //   } else if (selectedIndex > 0) {\n  //     newSelected = newSelected.concat(\n  //       selected.slice(0, selectedIndex),\n  //       selected.slice(selectedIndex + 1)\n  //     );\n  //   }\n\n  //   setSelected(newSelected);\n  // };\n\n  // const handleChangePage = (event, newPage) => {\n  //   setPage(newPage);\n  // };\n\n  // const handleChangeRowsPerPage = (event) => {\n  //   setRowsPerPage(parseInt(event.target.value, 10));\n  //   setPage(0);\n  // };\n\n  // const handleChangeDense = (event) => {\n  //   setDense(event.target.checked);\n  // };\n\n  // const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  // // Avoid a layout jump when reaching the last page with empty rows.\n  // const emptyRows =\n  //   page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n  // console.log(rows.length);\n  // console.log(rows);\n  // console.log(\"rows\");\n\n  return (\n    <Box\n      sx={{\n        width: 1,\n        height: \"100%\",\n        marginLeft: \"100px\",\n        marginRight: \"20px\",\n      }}\n    >\n      <DataGrid\n        autoHeight\n        columns={columns}\n        rows={rows}\n        pageSize={10}\n        rowsPerPageOptions={[12]}\n        sx={{\n          boxShadow: 2,\n          border: 2,\n          borderColor: \"primary.light\",\n          \"& .MuiDataGrid-cell:hover\": {\n            color: \"primary.main\",\n          },\n        }}\n      />\n      {console.log(columns)}\n      <Paper sx={{ width: \"100%\", mb: 2 }}></Paper>\n    </Box>\n  );\n}\n"],"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"},"metadata":{},"sourceType":"module"}