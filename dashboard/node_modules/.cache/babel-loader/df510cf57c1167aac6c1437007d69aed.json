{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  // const { machineData } = useMachineContext();\n  const [machines, setMachines] = useState([]);\n  useEffect(() => {\n    generateMachineData();\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  let stuckCount = 0;\n  let notWorkingCount = 0;\n\n  for (let i = 0; i < 24; i++) {\n    let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n    let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0; // Choose a random status from the sta array\n\n    let status = sta[Math.floor(Math.random() * sta.length)]; // Ensure that \"stuck\" is selected fewer than two times\n\n    if (status === \"stuck\" && stuckCount >= 2) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"stuck\") {\n      stuckCount++;\n    }\n\n    if (status === \"notWorking\" && notWorkingCount >= 3) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"notWorking\") {\n      notWorkingCount++;\n    }\n\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4 // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n        ,\n        sx: {\n          // display: \"flex\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\" // backgroundColor: \"rgba(0,0,255)\",\n\n        },\n        children: machines.map((machine, index) => {\n          // if (machine.prodRate!= 0)\n          if (index != 0) {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              sx: {\n                alignItems: \"center\",\n                // Center vertically\n                justifyContent: \"center\" // Center horizontally\n                // marginBottom: 2,\n                // display: \"flex\",\n                // backgroundColor: \"rgba(0,255,255)\",\n\n              },\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: `machines/:${machine.machineID}`\n                },\n                state: { ...machine\n                },\n                style: {\n                  textDecoration: \"none\"\n                },\n                children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n                  ID: machine.machineID,\n                  monaNumber: machine.monaNumber,\n                  moldProtector: machine.moldProtector,\n                  status: machine.status,\n                  moldMaker: machine.moldMaker,\n                  moldMaterial: machine.moldMaterial,\n                  moldShots: machine.moldShots,\n                  failedShots: machine.failedShots\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              } // sx={{ backgroundColor: \"black\" }}\n              ,\n              children: /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(MachineList, \"etL6ZTbqU58vGaTbtLSSX9BCKmI=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useEffect","useState","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","machines","setMachines","generateMachineData","intervalId","setInterval","updateMachineData","clearInterval","sta","stuckCount","notWorkingCount","i","mold_shots","Math","floor","random","failed_shots","status","length","machine","machineID","monaNumber","mNumber","moldProtector","Protector","moldMaterial","Material","moldMaker","Maker","moldShots","failedShots","push","display","alignItems","justifyContents","map","index","sm","md","lg","justifyContent","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Link from \"@mui/material/Link\";\n\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n\n  const [machines, setMachines] = useState([]);\n\n  useEffect(() => {\n    generateMachineData();\n    const intervalId = setInterval(() => {\n      updateMachineData();\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  let stuckCount = 0;\n  let notWorkingCount = 0;\n\n  for (let i = 0; i < 24; i++) {\n    let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n    let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n    // Choose a random status from the sta array\n    let status = sta[Math.floor(Math.random() * sta.length)];\n\n    // Ensure that \"stuck\" is selected fewer than two times\n    if (status === \"stuck\" && stuckCount >= 2) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"stuck\") {\n      stuckCount++;\n    }\n\n    if (status === \"notWorking\" && notWorkingCount >= 3) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"notWorking\") {\n      notWorkingCount++;\n    }\n\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots,\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n          sx={{\n            // display: \"flex\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n            // backgroundColor: \"rgba(0,0,255)\",\n          }}\n        >\n          {machines.map((machine, index) => {\n            // if (machine.prodRate!= 0)\n            if (index != 0) {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\", // Center vertically\n                    justifyContent: \"center\", // Center horizontally\n                    // marginBottom: 2,\n                    // display: \"flex\",\n                    // backgroundColor: \"rgba(0,255,255)\",\n                  }}\n                >\n                  <Link\n                    to={{ pathname: `machines/:${machine.machineID}` }}\n                    state={{ ...machine }}\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <MachineGrid\n                      ID={machine.machineID}\n                      monaNumber={machine.monaNumber}\n                      moldProtector={machine.moldProtector}\n                      status={machine.status}\n                      moldMaker={machine.moldMaker}\n                      moldMaterial={machine.moldMaterial}\n                      moldShots={machine.moldShots}\n                      failedShots={machine.failedShots}\n                    />\n                  </Link>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  // sx={{ backgroundColor: \"black\" }}\n                >\n                  <TimeGrid />\n                </Grid>\n              );\n            }\n          })}\n\n          {/* Add the TimeGrid component as the last tab */}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}