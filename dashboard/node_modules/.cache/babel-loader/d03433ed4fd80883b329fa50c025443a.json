{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  _s();\n\n  // const { machineData } = useMachineContext();\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n  // const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  // const Protector = [\n  //   \"Protector1\",\n  //   \"Protector2\",\n  //   \"Protector3\",\n  //   \"Protector4\",\n  //   \"Protector5\",\n  //   \"Protector6\",\n  //   \"Protector7\",\n  //   \"Protector8\",\n  //   \"Protector9\",\n  //   \"Protector10\",\n  //   \"Protector11\",\n  //   \"Protector12\",\n  //   \"Protector13\",\n  //   \"Protector14\",\n  //   \"Protector15\",\n  //   \"Protector16\",\n  //   \"Protector17\",\n  //   \"Protector18\",\n  //   \"Protector19\",\n  //   \"Protector20\",\n  //   \"Protector21\",\n  //   \"Protector22\",\n  //   \"Protector23\",\n  // ];\n  // const Maker = [\n  //   \"Maker1\",\n  //   \"Maker2\",\n  //   \"Maker3\",\n  //   \"Maker4\",\n  //   \"Maker5\",\n  //   \"Maker6\",\n  //   \"Maker7\",\n  //   \"Maker8\",\n  //   \"Maker9\",\n  //   \"Maker10\",\n  //   \"Maker11\",\n  //   \"Maker12\",\n  //   \"Maker13\",\n  //   \"Maker14\",\n  //   \"Maker15\",\n  //   \"Maker16\",\n  //   \"Maker17\",\n  //   \"Maker18\",\n  //   \"Maker19\",\n  //   \"Maker20\",\n  //   \"Maker21\",\n  //   \"Maker22\",\n  //   \"Maker23\",\n  // ];\n  // const mNumber = [\n  //   \"M#123\",\n  //   \"M#124\",\n  //   \"M#125\",\n  //   \"M#126\",\n  //   \"M#127\",\n  //   \"M#128_1\",\n  //   \"M#129\",\n  //   \"M#130\",\n  //   \"M#131_1\",\n  //   \"M#132\",\n  //   \"M#133_2\",\n  //   \"M#134\",\n  //   \"M#135\",\n  //   \"M#133_3\",\n  //   \"M#137\",\n  //   \"M#138\",\n  //   \"M#128_2\",\n  //   \"M#140\",\n  //   \"M#141\",\n  //   \"M#142\",\n  //   \"M#143\",\n  //   \"M#144\",\n  //   \"M#145\",\n  // ];\n  // const sta = [\"working\", \"notWorking\", \"stuck\"];\n  const [machines, setMachines] = useState([]);\n\n  const updateMachines = machinesToUpdate => {\n    setMachines(prevMachines => {\n      const updatedMachines = prevMachines.map(machine => {\n        if (machinesToUpdate.includes(machine.machineID)) {\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            const newMoldShots = machine.moldShots + 1;\n            const newFailedShots = newMoldShots % 50 === 0 ? machine.failedShots + 1 : machine.failedShots;\n            return { ...machine,\n              moldShots: newMoldShots,\n              failedShots: newFailedShots\n            };\n          }\n        }\n\n        return machine;\n      });\n      return updatedMachines;\n    });\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const machinesToUpdate = [];\n      machines.forEach(machine => {\n        if (machinesToUpdate.length < 3) {\n          machinesToUpdate.push(machine.machineID);\n\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            machine.moldShots += 1;\n          }\n        }\n      });\n      setMachines(prevMachines => {\n        const updatedMachines = prevMachines.map(machine => {\n          if (machinesToUpdate.includes(machine.machineID) && machine.status === \"stuck\") {\n            const newFailedShots = machine.failedShots + 1;\n            return { ...machine,\n              failedShots: newFailedShots\n            };\n          }\n\n          return machine;\n        });\n        return updatedMachines;\n      });\n      updateMachines(machinesToUpdate);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [machines]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: \"Molding Section Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: machines.map((machine, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 11,\n        sm: 4,\n        md: 2,\n        lg: 2,\n        m: {\n          sm: 2,\n          md: 4,\n          lg: 0\n        },\n        sx: {\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: index === 0 ? /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `machines/:${machine.machineID}`\n          },\n          state: { ...machine\n          },\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n            ID: machine.machineID,\n            monaNumber: machine.monaNumber,\n            moldProtector: machine.moldProtector,\n            status: machine.status,\n            moldMaker: machine.moldMaker,\n            moldMaterial: machine.moldMaterial,\n            moldShots: machine.moldShots,\n            failedShots: machine.failedShots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MachineList, \"etL6ZTbqU58vGaTbtLSSX9BCKmI=\");\n\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","useState","useEffect","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","machines","setMachines","updateMachines","machinesToUpdate","prevMachines","updatedMachines","map","machine","includes","machineID","status","newMoldShots","moldShots","newFailedShots","failedShots","intervalId","setInterval","forEach","length","push","clearInterval","display","alignItems","justifyContent","index","sm","md","lg","pathname","textDecoration","monaNumber","moldProtector","moldMaker","moldMaterial"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Link from \"@mui/material/Link\";\n\nexport const MachineList = () => {\n  // const { machineData } = useMachineContext();\n\n  // const refreshPage = () => {\n  //   window.location.reload(); // Reloads the entire page\n  // };\n\n  // // Effect to set up the interval for refreshing\n  // useEffect(() => {\n  //   const intervalId = setInterval(refreshPage, 5000);\n\n  //   // Cleanup function to clear the interval when the component is unmounted\n  //   return () => clearInterval(intervalId);\n  // }, []); // Empty dependency array to run the effect only once when the component mounts\n\n  // const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n  // const Protector = [\n  //   \"Protector1\",\n  //   \"Protector2\",\n  //   \"Protector3\",\n  //   \"Protector4\",\n  //   \"Protector5\",\n  //   \"Protector6\",\n  //   \"Protector7\",\n  //   \"Protector8\",\n  //   \"Protector9\",\n  //   \"Protector10\",\n  //   \"Protector11\",\n  //   \"Protector12\",\n  //   \"Protector13\",\n  //   \"Protector14\",\n  //   \"Protector15\",\n  //   \"Protector16\",\n  //   \"Protector17\",\n  //   \"Protector18\",\n  //   \"Protector19\",\n  //   \"Protector20\",\n  //   \"Protector21\",\n  //   \"Protector22\",\n  //   \"Protector23\",\n  // ];\n\n  // const Maker = [\n  //   \"Maker1\",\n  //   \"Maker2\",\n  //   \"Maker3\",\n  //   \"Maker4\",\n  //   \"Maker5\",\n  //   \"Maker6\",\n  //   \"Maker7\",\n  //   \"Maker8\",\n  //   \"Maker9\",\n  //   \"Maker10\",\n  //   \"Maker11\",\n  //   \"Maker12\",\n  //   \"Maker13\",\n  //   \"Maker14\",\n  //   \"Maker15\",\n  //   \"Maker16\",\n  //   \"Maker17\",\n  //   \"Maker18\",\n  //   \"Maker19\",\n  //   \"Maker20\",\n  //   \"Maker21\",\n  //   \"Maker22\",\n  //   \"Maker23\",\n  // ];\n\n  // const mNumber = [\n  //   \"M#123\",\n  //   \"M#124\",\n  //   \"M#125\",\n  //   \"M#126\",\n  //   \"M#127\",\n  //   \"M#128_1\",\n  //   \"M#129\",\n  //   \"M#130\",\n  //   \"M#131_1\",\n  //   \"M#132\",\n  //   \"M#133_2\",\n  //   \"M#134\",\n  //   \"M#135\",\n  //   \"M#133_3\",\n  //   \"M#137\",\n  //   \"M#138\",\n  //   \"M#128_2\",\n  //   \"M#140\",\n  //   \"M#141\",\n  //   \"M#142\",\n  //   \"M#143\",\n  //   \"M#144\",\n  //   \"M#145\",\n  // ];\n\n  // const sta = [\"working\", \"notWorking\", \"stuck\"];\n  const [machines, setMachines] = useState([]);\n\n  const updateMachines = (machinesToUpdate) => {\n    setMachines((prevMachines) => {\n      const updatedMachines = prevMachines.map((machine) => {\n        if (machinesToUpdate.includes(machine.machineID)) {\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            const newMoldShots = machine.moldShots + 1;\n            const newFailedShots =\n              newMoldShots % 50 === 0\n                ? machine.failedShots + 1\n                : machine.failedShots;\n\n            return {\n              ...machine,\n              moldShots: newMoldShots,\n              failedShots: newFailedShots,\n            };\n          }\n        }\n        return machine;\n      });\n\n      return updatedMachines;\n    });\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const machinesToUpdate = [];\n\n      machines.forEach((machine) => {\n        if (machinesToUpdate.length < 3) {\n          machinesToUpdate.push(machine.machineID);\n\n          if (machine.status !== \"stuck\" && machine.status !== \"notWorking\") {\n            machine.moldShots += 1;\n          }\n        }\n      });\n\n      setMachines((prevMachines) => {\n        const updatedMachines = prevMachines.map((machine) => {\n          if (\n            machinesToUpdate.includes(machine.machineID) &&\n            machine.status === \"stuck\"\n          ) {\n            const newFailedShots = machine.failedShots + 1;\n            return {\n              ...machine,\n              failedShots: newFailedShots,\n            };\n          }\n          return machine;\n        });\n\n        return updatedMachines;\n      });\n\n      updateMachines(machinesToUpdate);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [machines]);\n\n  return (\n    <Container maxWidth={false}>\n      <Title title=\"Molding Section Statistics\" />\n\n      <Grid\n        container\n        spacing={4}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {machines.map((machine, index) => (\n          <Grid\n            item\n            xs={11}\n            sm={4}\n            md={2}\n            lg={2}\n            m={{ sm: 2, md: 4, lg: 0 }}\n            key={index}\n            sx={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {index === 0 ? (\n              <TimeGrid />\n            ) : (\n              <Link\n                to={{ pathname: `machines/:${machine.machineID}` }}\n                state={{ ...machine }}\n                style={{ textDecoration: \"none\" }}\n              >\n                <MachineGrid\n                  ID={machine.machineID}\n                  monaNumber={machine.monaNumber}\n                  moldProtector={machine.moldProtector}\n                  status={machine.status}\n                  moldMaker={machine.moldMaker}\n                  moldMaterial={machine.moldMaterial}\n                  moldShots={machine.moldShots}\n                  failedShots={machine.failedShots}\n                />\n              </Link>\n            )}\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}