{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\94776\\\\Desktop\\\\monaDashboard\\\\dashboard\\\\src\\\\components\\\\machinelist\\\\index.js\";\nimport React from \"react\"; // import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\"; // import moment from \"moment\";\n\nimport { Title } from \"./utils/title\"; //import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\"; // import Paper from \"@mui/material/Paper\";\n\nimport Link from \"@mui/material/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MachineList = () => {\n  //const { machineData } = useMachineContext();\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n  const Protector = [\"Protector1\", \"Protector2\", \"Protector3\", \"Protector4\", \"Protector5\", \"Protector6\", \"Protector7\", \"Protector8\", \"Protector9\", \"Protector10\", \"Protector11\", \"Protector12\", \"Protector13\", \"Protector14\", \"Protector15\", \"Protector16\", \"Protector17\", \"Protector18\", \"Protector19\", \"Protector20\", \"Protector21\", \"Protector22\", \"Protector23\"];\n  const Maker = [\"Maker1\", \"Maker2\", \"Maker3\", \"Maker4\", \"Maker5\", \"Maker6\", \"Maker7\", \"Maker8\", \"Maker9\", \"Maker10\", \"Maker11\", \"Maker12\", \"Maker13\", \"Maker14\", \"Maker15\", \"Maker16\", \"Maker17\", \"Maker18\", \"Maker19\", \"Maker20\", \"Maker21\", \"Maker22\", \"Maker23\"];\n  const machines = [];\n  const mNumber = [\"M#123\", \"M#124\", \"M#125\", \"M#126\", \"M#127\", \"M#128\", \"M#129\", \"M#130\", \"M#131\", \"M#132\", \"M#133\", \"M#134\", \"M#135\", \"M#136\", \"M#137\", \"M#138\", \"M#139\", \"M#140\", \"M#141\", \"M#142\", \"M#143\", \"M#144\", \"M#145\"];\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  let stuckCount = 0;\n\n  for (let i = 0; i < 24; i++) {\n    let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n    let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0; // Choose a random status from the sta array\n\n    let status = sta[Math.floor(Math.random() * sta.length)]; // Ensure that \"stuck\" is selected fewer than two times\n\n    if (status === \"stuck\" && stuckCount >= 2) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"stuck\") {\n      stuckCount++;\n    }\n\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Molding Section Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4 // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n        ,\n        sx: {\n          // display: \"flex\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContents: \"center\" // backgroundColor: \"rgba(0,0,255)\",\n\n        },\n        children: machines.map((machine, index) => {\n          // if (machine.prodRate!= 0)\n          if (index != 0) {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              },\n              sx: {\n                alignItems: \"center\",\n                // Center vertically\n                justifyContent: \"center\" // Center horizontally\n                // marginBottom: 2,\n                // display: \"flex\",\n                // backgroundColor: \"rgba(0,255,255)\",\n\n              },\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: `machines/:${machine.machineID}`\n                },\n                state: { ...machine\n                },\n                style: {\n                  textDecoration: \"none\"\n                },\n                children: /*#__PURE__*/_jsxDEV(MachineGrid, {\n                  ID: machine.machineID,\n                  monaNumber: machine.monaNumber,\n                  moldProtector: machine.moldProtector,\n                  status: machine.status,\n                  moldMaker: machine.moldMaker,\n                  moldMaterial: machine.moldMaterial,\n                  moldShots: machine.moldShots,\n                  failedShots: machine.failedShots\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 11,\n              sm: 4,\n              md: 2,\n              lg: 2,\n              m: {\n                sm: 2,\n                md: 4,\n                lg: 0\n              } // sx={{ backgroundColor: \"black\" }}\n              ,\n              children: /*#__PURE__*/_jsxDEV(TimeGrid, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"connection not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = MachineList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineList\");","map":{"version":3,"names":["React","MachineGrid","TimeGrid","Title","Container","Grid","Link","MachineList","Material","Protector","Maker","machines","mNumber","sta","stuckCount","i","mold_shots","Math","floor","random","failed_shots","status","length","machine","machineID","monaNumber","moldProtector","moldMaterial","moldMaker","moldShots","failedShots","push","display","alignItems","justifyContents","map","index","sm","md","lg","justifyContent","pathname","textDecoration"],"sources":["C:/Users/94776/Desktop/monaDashboard/dashboard/src/components/machinelist/index.js"],"sourcesContent":["import React from \"react\";\n// import { Box, Container, Grid } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\nimport { MachineGrid } from \"./utils/machinegrid\";\nimport TimeGrid from \"./utils/timegrid\";\n// import moment from \"moment\";\nimport { Title } from \"./utils/title\";\n//import { useMachineContext } from \"../../contexts/machinecontext\";\n\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Link from \"@mui/material/Link\";\n\nexport const MachineList = () => {\n  //const { machineData } = useMachineContext();\n\n  const Material = [\"GPPS\", \"MABS\", \"TPR\", \"HIPS\", \"ABS\"];\n\n  const Protector = [\n    \"Protector1\",\n    \"Protector2\",\n    \"Protector3\",\n    \"Protector4\",\n    \"Protector5\",\n    \"Protector6\",\n    \"Protector7\",\n    \"Protector8\",\n    \"Protector9\",\n    \"Protector10\",\n    \"Protector11\",\n    \"Protector12\",\n    \"Protector13\",\n    \"Protector14\",\n    \"Protector15\",\n    \"Protector16\",\n    \"Protector17\",\n    \"Protector18\",\n    \"Protector19\",\n    \"Protector20\",\n    \"Protector21\",\n    \"Protector22\",\n    \"Protector23\",\n  ];\n\n  const Maker = [\n    \"Maker1\",\n    \"Maker2\",\n    \"Maker3\",\n    \"Maker4\",\n    \"Maker5\",\n    \"Maker6\",\n    \"Maker7\",\n    \"Maker8\",\n    \"Maker9\",\n    \"Maker10\",\n    \"Maker11\",\n    \"Maker12\",\n    \"Maker13\",\n    \"Maker14\",\n    \"Maker15\",\n    \"Maker16\",\n    \"Maker17\",\n    \"Maker18\",\n    \"Maker19\",\n    \"Maker20\",\n    \"Maker21\",\n    \"Maker22\",\n    \"Maker23\",\n  ];\n\n  const machines = [];\n  const mNumber = [\n    \"M#123\",\n    \"M#124\",\n    \"M#125\",\n    \"M#126\",\n    \"M#127\",\n    \"M#128\",\n    \"M#129\",\n    \"M#130\",\n    \"M#131\",\n    \"M#132\",\n    \"M#133\",\n    \"M#134\",\n    \"M#135\",\n    \"M#136\",\n    \"M#137\",\n    \"M#138\",\n    \"M#139\",\n    \"M#140\",\n    \"M#141\",\n    \"M#142\",\n    \"M#143\",\n    \"M#144\",\n    \"M#145\",\n  ];\n\n  const sta = [\"working\", \"notWorking\", \"stuck\"];\n  let stuckCount = 0;\n\n  for (let i = 0; i < 24; i++) {\n    let mold_shots = Math.floor(Math.random() * (100 - 20 + 1)) + 20;\n    let failed_shots = Math.floor(Math.random() * (20 - 0 + 1)) + 0;\n\n    // Choose a random status from the sta array\n    let status = sta[Math.floor(Math.random() * sta.length)];\n\n    // Ensure that \"stuck\" is selected fewer than two times\n    if (status === \"stuck\" && stuckCount >= 2) {\n      status = \"working\"; // or any other status you want to set when \"stuck\" limit is reached\n    } else if (status === \"stuck\") {\n      stuckCount++;\n    }\n\n    const machine = {\n      machineID: i,\n      monaNumber: [mNumber[i - 1]],\n      moldProtector: Protector[i - 1],\n      status: status,\n      moldMaterial: Material[Math.floor(Math.random() * Material.length)],\n      moldMaker: Maker[i - 1],\n      moldShots: mold_shots,\n      failedShots: failed_shots,\n    };\n    machines.push(machine);\n  }\n\n  if (machines) {\n    return (\n      <Container maxWidth={false}>\n        <Title title=\"Molding Section Statistics\" />\n\n        <Grid\n          container\n          spacing={4}\n          // columnSpacing={{ xs: 1, sm: 5, md: 3 }}\n          sx={{\n            // display: \"flex\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContents: \"center\",\n            // backgroundColor: \"rgba(0,0,255)\",\n          }}\n        >\n          {machines.map((machine, index) => {\n            // if (machine.prodRate!= 0)\n            if (index != 0) {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  key={index}\n                  sx={{\n                    alignItems: \"center\", // Center vertically\n                    justifyContent: \"center\", // Center horizontally\n                    // marginBottom: 2,\n                    // display: \"flex\",\n                    // backgroundColor: \"rgba(0,255,255)\",\n                  }}\n                >\n                  <Link\n                    to={{ pathname: `machines/:${machine.machineID}` }}\n                    state={{ ...machine }}\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <MachineGrid\n                      ID={machine.machineID}\n                      monaNumber={machine.monaNumber}\n                      moldProtector={machine.moldProtector}\n                      status={machine.status}\n                      moldMaker={machine.moldMaker}\n                      moldMaterial={machine.moldMaterial}\n                      moldShots={machine.moldShots}\n                      failedShots={machine.failedShots}\n                    />\n                  </Link>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  item\n                  xs={11}\n                  sm={4}\n                  md={2}\n                  lg={2}\n                  m={{ sm: 2, md: 4, lg: 0 }}\n                  // sx={{ backgroundColor: \"black\" }}\n                >\n                  <TimeGrid />\n                </Grid>\n              );\n            }\n          })}\n\n          {/* Add the TimeGrid component as the last tab */}\n        </Grid>\n      </Container>\n    );\n  } else {\n    return <div>connection not found</div>;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}